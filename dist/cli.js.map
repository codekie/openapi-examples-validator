{"version":3,"file":"cli.js","mappings":"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","sources":["webpack://openapi-examples-validator/./src/cli.js","webpack://openapi-examples-validator/external commonjs \"lodash.flatten\"","webpack://openapi-examples-validator/external commonjs \"errno\"","webpack://openapi-examples-validator/external commonjs \"json-pointer\"","webpack://openapi-examples-validator/./src/impl/v2/index.js","webpack://openapi-examples-validator/./src/const/result-type.js","webpack://openapi-examples-validator/./src/impl/service/all-properties-required.js","webpack://openapi-examples-validator/./src/impl/service/no-additional-properties.js","webpack://openapi-examples-validator/external commonjs \"ajv-formats\"","webpack://openapi-examples-validator/external commonjs \"glob\"","webpack://openapi-examples-validator/./src/utils/index.js","webpack://openapi-examples-validator/./src/impl/v3/index.js","webpack://openapi-examples-validator/./src/application-error.js","webpack://openapi-examples-validator/external commonjs \"yaml\"","webpack://openapi-examples-validator/./src/index.js","webpack://openapi-examples-validator/./src/impl/index.js","webpack://openapi-examples-validator/./src/validator.js","webpack://openapi-examples-validator/external commonjs \"lodash.flatmap\"","webpack://openapi-examples-validator/external commonjs \"json-schema-ref-parser\"","webpack://openapi-examples-validator/external commonjs \"lodash.merge\"","webpack://openapi-examples-validator/./package.json","webpack://openapi-examples-validator/external commonjs \"ajv-draft-04\"","webpack://openapi-examples-validator/external commonjs \"commander\"","webpack://openapi-examples-validator/external node-commonjs \"fs\"","webpack://openapi-examples-validator/external node-commonjs \"path\"","webpack://openapi-examples-validator/./src/impl/service/common.js","webpack://openapi-examples-validator/external commonjs \"jsonpath-plus\"","webpack://openapi-examples-validator/external commonjs \"lodash.clonedeep\"","webpack://openapi-examples-validator/webpack/bootstrap","webpack://openapi-examples-validator/webpack/startup"],"sourcesContent":["// Shebang will be added by webpack\n//#!/usr/bin/env node --harmony\n\n/**\n * Command Line Interface for the validator\n */\n\nconst\n    VERSION = require('../package.json').version,\n    program = require('commander'),\n    { validateFile, validateExample, validateExamplesByMap } = require('./index');\n\n// FOR AUTOMATED TESTS\n\nconst ENV_TEST = process.env.OPENAPI_EXAMPLES_VALIDATOR_TESTS === 'true';\n\n// DEFINE CLI\n\nprogram\n    .version(VERSION)\n    .arguments('<filepath>')\n    .description('Validate embedded examples in OpenAPI-specs (JSON and YAML supported).\\n'\n        + '  To validate external examples, use the `-s` and `-e` option.\\n'\n        + '  To pass a mapping-file, to validate multiple external examples, use the `-m` option.')\n    .option('-s, --schema-jsonpath <schema-jsonpath>', 'Path to OpenAPI-schema, to validate the example file against')\n    .option('-e, --example-filepath <example-filepath>', 'file path to example file, to be validated')\n    .option('-m, --mapping-filepath <mapping-filepath>', 'file path to map, containing schema-paths as key and the'\n        + ' file-path(s) to examples as value. If wildcards are used, the parameter has to be put in quotes.')\n    .option('-c, --cwd-to-mapping-file', \"changes to the directory of the mapping-file, before resolving the example's\"\n        + ' paths. Use this option, if your mapping-files use relative paths for the examples')\n    .option('-n, --no-additional-properties', 'don\\'t allow properties that are not described in the schema')\n    .option('-r, --all-properties-required', 'make all the properties in the schema required')\n    .option('-o, --ignore-formats <ignored-formats...>', 'Datatype formats to ignore '\n        + '(to prevent \"unknown format\" message in the error-console.)')\n    .action(processAction);\nprogram.on('--help', () => {\n    console.log('\\n\\n  Example for external example-file:\\n');\n    console.log('    $ openapi-examples-validator -s $.paths./.get.responses.200.schema -e example.json'\n        + ' openapi-spec.json\\n\\n');\n});\n// Execute and export promise (for automated tests)\nmodule.exports = program.parseAsync(process.argv);\n\n// IMPLEMENTATION DETAILS\n\nasync function processAction(filepath, options) {\n    const { schemaJsonpath, exampleFilepath, mappingFilepath, cwdToMappingFile, allPropertiesRequired } = options,\n        noAdditionalProperties = !options.additionalProperties,\n        ignoreFormats = _prepareIgnoreFormats(options.ignoreFormats);\n    let result;\n    if (mappingFilepath) {\n        console.log('Validating with mapping file');\n        result = await validateExamplesByMap(filepath, mappingFilepath, {\n            cwdToMappingFile,\n            noAdditionalProperties,\n            ignoreFormats,\n            allPropertiesRequired\n        });\n    } else if (schemaJsonpath && exampleFilepath) {\n        console.log('Validating single external example');\n        result = await validateExample(filepath, schemaJsonpath, exampleFilepath, {\n            noAdditionalProperties,\n            ignoreFormats,\n            allPropertiesRequired\n        });\n    } else {\n        console.log('Validating examples');\n        result = await validateFile(filepath, {\n            noAdditionalProperties,\n            ignoreFormats,\n            allPropertiesRequired\n        });\n    }\n    _handleResult(result);\n}\n\nfunction _handleResult(result) {\n    const noExit = ENV_TEST;\n    _printStatistics(result.statistics);\n    if (result.valid) {\n        process.stdout.write('\\nNo errors found.\\n\\n');\n        !noExit && process.exit(0);\n        return;\n    }\n    process.stdout.write('\\nErrors found.\\n\\n');\n    process.stderr.write(JSON.stringify(result.errors, null, '    '));\n    !noExit && process.exit(1);\n}\n\nfunction _printStatistics(statistics) {\n    const {\n            schemasWithExamples,\n            examplesWithoutSchema,\n            examplesTotal,\n            matchingFilePathsMapping\n        } = statistics,\n        strStatistics = [\n            `Schemas with examples found: ${ schemasWithExamples }`,\n            `Examples without schema found: ${ examplesWithoutSchema }`,\n            `Total examples found: ${ examplesTotal }`\n        ];\n    if (matchingFilePathsMapping != null) {\n        strStatistics.push(`Matching mapping files found: ${ matchingFilePathsMapping }`);\n    }\n    process.stdout.write(`${ strStatistics.join('\\n') }\\n`);\n}\n\nfunction _prepareIgnoreFormats(ignoreFormats) {\n    if (ignoreFormats == null || !Array.isArray(ignoreFormats)) { return ignoreFormats; }\n    if (ignoreFormats.length !== 1) { return ignoreFormats; }\n    // If only one argument has been passed, with all formats separated by newlines\n    if (ignoreFormats[0].indexOf('\\n') === -1) { return ignoreFormats; }\n    return ignoreFormats[0].split('\\n').filter(entry => !entry.match(/^\\s*$/));\n}\n","module.exports = require(\"lodash.flatten\");","module.exports = require(\"errno\");","module.exports = require(\"json-pointer\");","/**\n * Contains validation-logic that is specific to V2 of the OpenAPI-spec\n */\n\nconst cloneDeep = require('lodash.clonedeep'),\n    { setAllPropertiesRequired } = require('../service/all-properties-required'),\n    { setNoAdditionalProperties } = require('../service/no-additional-properties');\n\n// CONSTANTS\n\nconst PATH__EXAMPLES = '$..examples[?(@property && typeof @property === \"string\" && @property.match(/[\\/+]json/))]',\n    PROP__SCHEMA = 'schema',\n    PROP__EXAMPLES = 'examples';\n\nmodule.exports = {\n    buildValidationMap,\n    getJsonPathsToExamples,\n    prepare\n};\n\n// IMPLEMENTATION DETAILS\n\n/**\n * Get the JSONPaths to the examples\n * @returns {Array.<String>}    JSONPaths to the examples\n */\nfunction getJsonPathsToExamples() { return [PATH__EXAMPLES]; }\n\n\n\n/**\n * Builds a map with the json-pointers to the response-schema as key and the json-pointers to the examples, as value.\n * The pointer of the schema is derived from the pointer to the example and doesn't necessarily mean\n * that the schema actually exists.\n * @param {Array.<String>}  pathsExamples   Paths to the examples\n * @returns {Object.<String, String>} Map with schema-pointers as key and example-pointers as value\n * @private\n */\nfunction buildValidationMap(pathsExamples) {\n    return pathsExamples.reduce((validationMap, pathExample) => {\n        const pathSchema = _getSchemaPointerOfExample(pathExample);\n        validationMap[pathSchema] = (validationMap[pathSchema] || new Set())\n            .add(pathExample);\n        return validationMap;\n    }, {});\n}\n\n/**\n * Pre-processes the OpenAPI-spec, for further use.\n * The passed spec won't be modified. If a modification happens, a modified copy will be returned.\n * @param {Object}  openapiSpec                     The OpenAPI-spec as JSON-schema\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not defined in the schema\n * @param {boolean} [allPropertiesRequired=false]   Make all properties required\n * @return {Object} The prepared OpenAPI-spec\n */\nfunction prepare(openapiSpec, { noAdditionalProperties, allPropertiesRequired } = {}) {\n    const openapiSpecCopy = cloneDeep(openapiSpec);\n    noAdditionalProperties && setNoAdditionalProperties(openapiSpecCopy, getJsonPathsToExamples());\n    allPropertiesRequired && setAllPropertiesRequired(openapiSpecCopy, getJsonPathsToExamples());\n    return openapiSpecCopy;\n}\n\n/**\n * Gets a JSON-pointer to the corresponding response-schema, based on a JSON-pointer to an example.\n * @param {String}  examplePointer JSON-pointer to example\n * @returns {String} JSON-pointer to the corresponding response-schema\n * @private\n */\nfunction _getSchemaPointerOfExample(examplePointer) {\n    const pathSegs = examplePointer.split('/'),\n        idxExamples = pathSegs.lastIndexOf(PROP__EXAMPLES);\n    pathSegs.splice(idxExamples, pathSegs.length - idxExamples, PROP__SCHEMA);\n    return pathSegs.join('/');\n}\n","module.exports = {\n    parent: 'parent',\n    parentProperty: 'parentProperty',\n    path: 'path',\n    pointer: 'pointer',\n    value: 'value'\n};\n","const { applyCallbackToAllObjectModels } = require('./common');\n\nmodule.exports = {\n    setAllPropertiesRequired\n};\n\n/**\n * Sets all properties of each object to required\n * @param {Object}                  openApiSpec         The to-be-modified schema\n * @param {Array.<String>}          [examplePaths=[]]   The paths to the examples, which's content must not be modified\n */\nfunction setAllPropertiesRequired(openApiSpec, examplePaths = []) {\n    applyCallbackToAllObjectModels(openApiSpec, examplePaths,\n        () => {\n            return (value) => {\n                if (value.hasOwnProperty('properties')) {\n                    value.required = Object.keys(value.properties);\n                }\n            };\n        });\n}\n","const { applyCallbackToAllObjectModels } = require('./common');\n\nmodule.exports = {\n    setNoAdditionalProperties\n};\n\nconst JSON_SCHEMA_COMBINERS = [\n    'oneOf',\n    'allOf',\n    'anyOf',\n    'not'\n];\n\n/**\n * Sets the flag to indicate that it doesn't allow properties that are not described in the schema\n * @param {Object}                  openApiSpec         The to-be-modified schema\n * @param {Array.<String>}          [examplePaths=[]]   The paths to the examples, which's content must not be modified\n */\nfunction setNoAdditionalProperties(openApiSpec, examplePaths = []) {\n    // Match all combiner keywords that are not preceded by a 'properties' keyword.\n    // This allow to have objects that have as property name one of the combiner keywords.\n    const hasJsonCombinerParentRegex\n        = new RegExp('(?<!\\\\[\\'properties\\'\\\\])\\\\[\\'(?:' + JSON_SCHEMA_COMBINERS.join('|') + ')\\'\\\\]');\n\n    applyCallbackToAllObjectModels(openApiSpec, examplePaths,\n        (path) => {\n            return (schema) => {\n                // Exclude schema that have a JSON combiner as parent\n                if (hasJsonCombinerParentRegex.test(path)) {\n                    console.warn('\"additionalProperties\" flag not set '\n                        + `for ${path} because it has a parent with a JSON-schema combiner keyword.`);\n                    return;\n                }\n                // Exclude schema that contains a JSON combiner\n                if (JSON_SCHEMA_COMBINERS.some((combiner) => schema.hasOwnProperty(combiner))) {\n                    console.warn('\"additionalProperties\" flag not set '\n                        + `for ${path} because it contains JSON-schema combiner keyword.`);\n                    return;\n                }\n                // Exclude schema that already contains additionalProperties\n                if (schema.hasOwnProperty('additionalProperties')) {\n                    return;\n                }\n                schema.additionalProperties = false;\n            };\n        });\n}\n","module.exports = require(\"ajv-formats\");","module.exports = require(\"glob\");","const path = require('path'),\n    refParser = require('json-schema-ref-parser');\n\nmodule.exports = {\n    createValidationResponse,\n    dereferenceJsonSchema\n};\n\n/**\n * Creates a unified response for the validation-result\n * @param {Array.<ApplicationError>}    errors\n * @param {ValidationStatistics}        statistics\n * @returns {ValidationResponse}\n * @private\n */\nfunction createValidationResponse({ errors, statistics = {} }) {\n    return {\n        valid: !errors.length,\n        statistics,\n        errors\n    };\n}\n\n/**\n * Includes all referenced, external schemas (by the keyword `$ref`) into the schema\n *\n * CAUTION: This function is not concurrency-safe !!\n * This function changes the working dir and sets it back. This may become an concurrency issue when there are\n * other tasks running that rely on the working dir while this function waits for the asynchronous task of\n * dereferencing to complete.\n *\n * @param {String} pathToSchema     File-path to the schema\n * @param {Object} jsonSchema       Schema with potential externally referenced schemas\n * @returns {Promise<Object>}       Dereferenced schema\n */\nasync function dereferenceJsonSchema(pathToSchema, jsonSchema) {\n    const currentWorkingDir = process.cwd();\n    // Change the working dir to the schema-path, to make sure that relative paths can be resolved\n    process.chdir(path.dirname(pathToSchema));\n    const dereferencedSchema = await refParser.dereference(jsonSchema);\n    // Restore original working dir\n    process.chdir(currentWorkingDir);\n    return dereferencedSchema;\n}\n","/**\n * Contains validation-logic that is specific to V3 of the OpenAPI-spec\n */\n\nconst cloneDeep = require('lodash.clonedeep'),\n    { ApplicationError, ErrorType } = require('../../application-error'),\n    { setAllPropertiesRequired } = require('../service/all-properties-required'),\n    { setNoAdditionalProperties } = require('../service/no-additional-properties');\n\n// CONSTANTS\n\n// eslint-disable-next-line max-len\nconst RESPONSES = '$..responses..content[?(@property && typeof @property === \"string\" && @property.match(/[\\/+]json/))]';\nconst REQUEST = '$..requestBody.content[?(@property && typeof @property === \"string\" && @property.match(/[\\/+]json/))]';\nconst SINGLE_EXAMPLE = '.example';\nconst MANY_EXAMPLES = '.examples.*.value';\n\nconst PATH__EXAMPLE = `${RESPONSES}${SINGLE_EXAMPLE}`,\n    PATH__EXAMPLES = `${RESPONSES}${MANY_EXAMPLES}`,\n    PATH__EXAMPLE__PARAMETER = '$..parameters..example',\n    PATH__EXAMPLES__PARAMETER = '$..parameters..examples.*.value',\n    PATH__EXAMPLE__REQUEST_BODY = `${REQUEST}${SINGLE_EXAMPLE}`,\n    PATH__EXAMPLES__REQUEST_BODY = `${REQUEST}${MANY_EXAMPLES}`,\n    PROP__SCHEMA = 'schema',\n    PROP__EXAMPLE = 'example',\n    PROP__EXAMPLES = 'examples';\n\nconst ExampleType = {\n    single: 'single',\n    multi: 'multi'\n};\n\n// PUBLIC API\n\nmodule.exports = {\n    buildValidationMap,\n    getJsonPathsToExamples,\n    prepare\n};\n\n// IMPLEMENTATION DETAILS\n\n/**\n * Get the JSONPaths to the examples\n * @returns {Array.<String>}    JSONPaths to the examples\n */\nfunction getJsonPathsToExamples() {\n    return [\n        PATH__EXAMPLE,\n        PATH__EXAMPLES,\n        PATH__EXAMPLE__PARAMETER,\n        PATH__EXAMPLES__PARAMETER,\n        PATH__EXAMPLE__REQUEST_BODY,\n        PATH__EXAMPLES__REQUEST_BODY\n    ];\n}\n\n/**\n * Builds a map with the json-pointers to the response-schema as key and the json-pointers to the examples, as value.\n * The pointer of the schema is derived from the pointer to the example and doesn't necessarily mean\n * that the schema actually exists.\n * @param {Array.<String>}  pathsExamples   Paths to the examples\n * @returns {Object.<String, String>} Map with schema-pointers as key and example-pointers as value\n * @private\n */\nfunction buildValidationMap(pathsExamples) {\n    const exampleTypesOfSchemas = new Map();\n    return pathsExamples.reduce((validationMap, pathExample) => {\n        const { pathSchemaAsArray, exampleType } = _getSchemaPointerOfExample(pathExample),\n            pathSchema = pathSchemaAsArray.join('/'),\n            exampleTypeOfSchema = exampleTypesOfSchemas.get(pathSchema);\n        if (exampleTypeOfSchema) {\n            exampleTypeOfSchema !== exampleType && _throwMutuallyExclusiveError(pathSchemaAsArray);\n        }\n        exampleTypesOfSchemas.set(pathSchema, exampleType);\n        validationMap[pathSchema] = (validationMap[pathSchema] || new Set())\n            .add(pathExample);\n        return validationMap;\n    }, {});\n}\n\n/**\n * Pre-processes the OpenAPI-spec, for further use.\n * The passed spec won't be modified. If a modification happens, a modified copy will be returned.\n * @param {Object}  openapiSpec     The OpenAPI-spec as JSON-schema\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not defined in the schema\n * @param {boolean} [allPropertiesRequired=false]   Make all properties required\n * @return {Object} The prepared OpenAPI-spec\n */\nfunction prepare(openapiSpec, { noAdditionalProperties, allPropertiesRequired } = {}) {\n    const openapiSpecCopy = cloneDeep(openapiSpec);\n    noAdditionalProperties && setNoAdditionalProperties(openapiSpecCopy, getJsonPathsToExamples());\n    allPropertiesRequired && setAllPropertiesRequired(openapiSpecCopy, getJsonPathsToExamples());\n    return openapiSpecCopy;\n}\n\n/**\n * Gets a JSON-pointer to the corresponding response-schema, based on a JSON-pointer to an example.\n *\n * It is assumed that the JSON-pointer to the example is valid and existing.\n * @param {String}  examplePointer JSON-pointer to example\n * @returns {{\n *     exampleType: ExampleType,\n *     pathSchema: String\n * }} JSON-path to the corresponding response-schema\n * @private\n */\nfunction _getSchemaPointerOfExample(examplePointer) {\n    const pathSegs = examplePointer.split('/'),\n        idxExample = pathSegs.lastIndexOf(PROP__EXAMPLE),\n        /** @type ExampleType */\n        exampleType = idxExample > -1\n            ? ExampleType.single\n            : ExampleType.multi,\n        idxExamples = exampleType === ExampleType.single\n            ? idxExample\n            : pathSegs.lastIndexOf(PROP__EXAMPLES);\n    pathSegs.splice(idxExamples, pathSegs.length - idxExamples, PROP__SCHEMA);\n    return {\n        exampleType,\n        pathSchemaAsArray: pathSegs\n    };\n}\n\n\n/**\n * Checks if only `example` or `examples` is set for the schema, as they are mutually exclusive by OpenAPI-spec.\n * @param {Array.<String>}  pathSchemaAsArray   JSON-path to the Schema, as JSON-path-array\n * @throws ApplicationError if both are set\n * @private\n */\nfunction _throwMutuallyExclusiveError(pathSchemaAsArray) {\n    const pathContextAsArray = pathSchemaAsArray.slice(0, pathSchemaAsArray.length - 1);    // Strip `schema` away\n    throw ApplicationError.create({\n        type: ErrorType.errorAndErrorsMutuallyExclusive,\n        message: 'Properties \"error\" and \"errors\" are mutually exclusive',\n        params: {\n            pathContext: pathContextAsArray.join('/')\n        }\n    });\n}\n","const\n    merge = require('lodash.merge'),\n    { ENOENT } = require('errno').code;\n\n// TYPEDEFINITIONS\n\n/**\n * @typedef {{}} CustomError\n * @augments Error\n */\n\n/**\n * ApplicationErrorOptions\n * @typedef {{\n *      [instancePath]: string,\n *      [examplePath]: string,\n *      [exampleFilePath]: string,\n *      [keyword]: string,\n *      [message]: string,\n *      [mapFilePath]: string,\n *      [params]: {\n *          [path]: string,\n *          [missingProperty]: string,\n *          [type]: string\n *      },\n *      [schemaPath]: string\n * }} ApplicationErrorOptions\n */\n\n// CONSTANTS\n\nconst ErrorType = {\n    jsENOENT: ENOENT.code,\n    jsonPathNotFound: 'JsonPathNotFound',\n    errorAndErrorsMutuallyExclusive: 'ErrorErrorsMutuallyExclusive',\n    parseError: 'ParseError',\n    validation: 'Validation'\n};\n\n// CLASSES\n\n/**\n * Unified application-error\n */\nclass ApplicationError {\n    /**\n     * Factory-function, which is able to consume validation-errors and JS-errors. If a validation error is passed, all\n     * properties will be adopted.\n     * @param {Error|CustomError}   err     Javascript-, validation- or custom-error, to create the application-error\n     *                                      from\n     * @returns {ApplicationError} Unified application-error instance\n     */\n    static create(err) {\n        const { code, message, path, cause } = err,               // Certain properties of Javascript-errors\n            type = code || err.type || ErrorType.validation,    // If `code` is available then it's a Javascript-error\n            options = { message };\n        if (ErrorType.validation === type || ErrorType.errorAndErrorsMutuallyExclusive === type) {\n            // For certain, created error-types, copy all properties\n            merge(options, err);\n        } else {\n            // Copy certain properties of Javascript-error (but only if available)\n            path && merge(options, { params: { path } });\n            cause && merge(options, cause);\n        }\n        return new ApplicationError(type, options);\n    }\n\n    /**\n     * Constructor\n     * @param {string}                  type        Type of error (see statics)\n     * @param {ApplicationErrorOptions} [options]   Optional properties\n     */\n    constructor(type, options = {}) {\n        Object.assign(this, {\n            type,\n            ...options\n        });\n    }\n}\n\n// PUBLIC API\n\nmodule.exports = {\n    ApplicationError,\n    ErrorType\n};\n","module.exports = require(\"yaml\");","/**\n * Entry-point for the validator-API\n */\n\nconst\n    merge = require('lodash.merge'),\n    flatten = require('lodash.flatten'),\n    flatMap = require('lodash.flatmap'),\n    jsonPointer = require('json-pointer'),\n    fs = require('fs'),\n    path = require('path'),\n    glob = require('glob'),\n    yaml = require('yaml'),\n    { JSONPath: jsonPath } = require('jsonpath-plus'),\n    refParser = require('json-schema-ref-parser'),\n    { createError } = require('errno').custom,\n    ResultType = require('./const/result-type'),\n    { getValidatorFactory, compileValidate } = require('./validator'),\n    Determiner = require('./impl'),\n    { ApplicationError, ErrorType } = require('./application-error'),\n    { createValidationResponse, dereferenceJsonSchema } = require('./utils');\n\n// CONSTANTS\n\nconst SYM__INTERNAL = Symbol('internal'),\n    PROP__SCHEMAS_WITH_EXAMPLES = 'schemasWithExamples',\n    FILE_EXTENSIONS__YAML = [\n        'yaml',\n        'yml'\n    ];\n\n// STATICS\n\n/**\n * ErrorJsonPathNotFound\n * @typedef {{\n *      cause: {\n *          [params]: {\n *              [path]: string\n *          }\n *      }\n * }} ErrorJsonPathNotFound\n * @augments CustomError\n */\n\n/**\n * @constructor\n * @augments CustomError\n * @returns {ErrorJsonPathNotFound}\n */\nconst ErrorJsonPathNotFound = createError(ErrorType.jsonPathNotFound);\n\n// PUBLIC API\n\nmodule.exports = {\n    'default': validateExamples,\n    validateFile,\n    validateExample,\n    validateExamplesByMap\n};\n\n// IMPLEMENTATION DETAILS\n\n// Type definitions\n\n/**\n * ValidationStatistics\n * @typedef {{\n *      schemasWithExamples: number,\n *      examplesTotal: number,\n *      examplesWithoutSchema: number,\n *      [matchingFilePathsMapping]: number\n * }} ValidationStatistics\n */\n\n/**\n * ValidationResponse\n * @typedef {{\n *      valid: boolean,\n *      statistics: ValidationStatistics,\n *      errors: Array.<ApplicationError>\n * }} ValidationResponse\n */\n\n/**\n * @callback ValidationHandler\n * @param {ValidationStatistics}    statistics\n * @returns {Array.<ApplicationError>}\n */\n\n// Public\n\n/**\n * Validates OpenAPI-spec with embedded examples.\n * @param {Object}  openapiSpec OpenAPI-spec\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not defined in the schema\n * @param {boolean} [allPropertiesRequired=false]   Make all properties required\n * @param {Array.<string>} [ignoreFormats]          List of datatype formats that shall be ignored (to prevent\n *                                                  \"unsupported format\" errors). If an Array with only one string is\n *                                                  provided where the formats are separated with `\\n`, the entries\n *                                                  will be expanded to a new array containing all entries.\n * @returns {ValidationResponse}\n */\nasync function validateExamples(openapiSpec, { noAdditionalProperties, ignoreFormats, allPropertiesRequired } = {}) {\n    const impl = Determiner.getImplementation(openapiSpec);\n    openapiSpec = await refParser.dereference(openapiSpec);\n    openapiSpec = impl.prepare(openapiSpec, { noAdditionalProperties, allPropertiesRequired });\n    let pathsExamples = impl.getJsonPathsToExamples()\n        .reduce((res, pathToExamples) => {\n            return res.concat(_pathToPointer(pathToExamples, openapiSpec));\n        }, []);\n    return _validateExamplesPaths({ impl }, pathsExamples, openapiSpec, { ignoreFormats });\n}\n\n/**\n * Validates OpenAPI-spec with embedded examples.\n * @param {string}  filePath                        File-path to the OpenAPI-spec\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not defined in the schema\n * @param {boolean} [allPropertiesRequired=false]   Make all properties required\n * @param {Array.<string>} [ignoreFormats]          List of datatype formats that shall be ignored (to prevent\n *                                                  \"unsupported format\" errors). If an Array with only one string is\n *                                                  provided where the formats are separated with `\\n`, the entries\n *                                                  will be expanded to a new array containing all entries.\n * @returns {ValidationResponse}\n */\nasync function validateFile(filePath, { noAdditionalProperties, ignoreFormats, allPropertiesRequired } = {}) {\n    let openapiSpec = null;\n    try {\n        openapiSpec = await _parseSpec(filePath);\n    } catch (err) {\n        return createValidationResponse({ errors: [ApplicationError.create(err)] });\n    }\n    return validateExamples(openapiSpec, { noAdditionalProperties, ignoreFormats, allPropertiesRequired });\n}\n\n/**\n * Validates examples by mapping-files.\n * @param {string}  filePathSchema              File-path to the OpenAPI-spec\n * @param {string}  globMapExternalExamples     File-path (globs are supported) to the mapping-file containing JSON-\n *                                              paths to schemas as key and a single file-path or Array of file-paths\n *                                              to external examples\n * @param {boolean} [cwdToMappingFile=false]    Change working directory for resolving the example-paths (relative to\n *                                              the mapping-file)\n * @param {boolean} [noAdditionalProperties=false] Don't allow properties that are not defined in the schema\n * @param {boolean} [allPropertiesRequired=false]  Make all properties required\n * @param {Array.<string>} [ignoreFormats]      List of datatype formats that shall be ignored (to prevent\n *                                              \"unsupported format\" errors). If an Array with only one string is\n *                                              provided where the formats are separated with `\\n`, the entries\n *                                              will be expanded to a new array containing all entries.\n * @returns {ValidationResponse}\n */\nasync function validateExamplesByMap(filePathSchema, globMapExternalExamples,\n    { cwdToMappingFile, noAdditionalProperties, ignoreFormats, allPropertiesRequired } = {}\n) {\n    let matchingFilePathsMapping = 0;\n    const filePathsMaps = glob.sync(\n        globMapExternalExamples,\n        // Using `nonull`-option to explicitly create an app-error if there's no match for `globMapExternalExamples`\n        { nonull: true }\n    );\n    let responses = [];\n    // for..of here, to support sequential execution of async calls. This is required, since dereferencing the\n    // `openapiSpec` is not concurrency-safe\n    for (const filePathMapExternalExamples of filePathsMaps) {\n        let mapExternalExamples = null,\n            openapiSpec = null;\n        try {\n            mapExternalExamples = JSON.parse(fs.readFileSync(filePathMapExternalExamples, 'utf-8'));\n            openapiSpec = await _parseSpec(filePathSchema);\n            openapiSpec = Determiner.getImplementation(openapiSpec)\n                .prepare(openapiSpec, { noAdditionalProperties, allPropertiesRequired });\n        } catch (err) {\n            responses.push(createValidationResponse({ errors: [ApplicationError.create(err)] }));\n            continue;\n        }\n        // Not using `glob`'s response-length, because it is `1` if there's no match for `globMapExternalExamples`.\n        // Instead, increment on every match\n        matchingFilePathsMapping++;\n        responses.push(\n            _validate(\n                statistics => {\n                    return _handleExamplesByMapValidation(\n                        openapiSpec, mapExternalExamples, statistics, {\n                            cwdToMappingFile,\n                            dirPathMapExternalExamples: path.dirname(filePathMapExternalExamples),\n                            ignoreFormats\n                        }\n                    ).map(\n                        (/** @type ApplicationError */ error) => Object.assign(error, {\n                            mapFilePath: path.normalize(filePathMapExternalExamples)\n                        })\n                    );\n                }\n            )\n        );\n    }\n    return merge(\n        responses.reduce((res, response) => {\n            if (!res) {\n                return response;\n            }\n            return _mergeValidationResponses(res, response);\n        }, null),\n        { statistics: { matchingFilePathsMapping } }\n    );\n}\n\n/**\n * Validates a single external example.\n * @param {String}  filePathSchema                  File-path to the OpenAPI-spec\n * @param {String}  pathSchema                      JSON-path to the schema\n * @param {String}  filePathExample                 File-path to the external example-file\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not described in the schema\n * @param {boolean} [allPropertiesRequired=false]   Make all properties required\n * @param {Array.<string>} [ignoreFormats]          List of datatype formats that shall be ignored (to prevent\n *                                                  \"unsupported format\" errors). If an Array with only one string is\n *                                                  provided where the formats are separated with `\\n`, the entries\n *                                                  will be expanded to a new array containing all entries.\n * @returns {ValidationResponse}\n */\nasync function validateExample(filePathSchema, pathSchema, filePathExample, {\n    noAdditionalProperties,\n    ignoreFormats,\n    allPropertiesRequired\n} = {}) {\n    let example = null,\n        schema = null,\n        openapiSpec = null;\n    try {\n        example = JSON.parse(fs.readFileSync(filePathExample, 'utf-8'));\n        openapiSpec = await _parseSpec(filePathSchema);\n        openapiSpec = Determiner.getImplementation(openapiSpec)\n            .prepare(openapiSpec, { noAdditionalProperties, allPropertiesRequired });\n        schema = _extractSchema(_getSchmaPointer(pathSchema, openapiSpec), openapiSpec);\n    } catch (err) {\n        return createValidationResponse({ errors: [ApplicationError.create(err)] });\n    }\n    return _validate(\n        statistics => _validateExample({\n            createValidator: _initValidatorFactory(openapiSpec, { ignoreFormats }),\n            schema,\n            example,\n            statistics,\n            filePathExample\n        })\n    );\n}\n\n// Private\n\n/**\n * Parses the OpenAPI-spec (supports JSON and YAML)\n * @param {String}  filePath    File-path to the OpenAPI-spec\n * @returns {object}    Parsed OpenAPI-spec\n * @private\n */\nasync function _parseSpec(filePath) {\n    const isYaml = _isFileTypeYaml(filePath);\n    let jsonSchema;\n\n    if (isYaml) {\n        try {\n            jsonSchema = yaml.parse(fs.readFileSync(filePath, 'utf-8'));\n        } catch (e) {\n            const { name, message } = e;\n            throw new ApplicationError(ErrorType.parseError, { message: `${name}: ${message}` });\n        }\n    } else {\n        jsonSchema = JSON.parse(fs.readFileSync(filePath, 'utf-8'));\n    }\n\n    return await dereferenceJsonSchema(filePath, jsonSchema);\n}\n\n/**\n * Determines whether the filePath is pointing to a YAML-file\n * @param {String}  filePath    File-path to the OpenAPI-spec\n * @returns {boolean}   `true`, if the file is a YAML-file\n * @private\n */\nfunction _isFileTypeYaml(filePath) {\n    const extension = filePath.split('.').pop();\n    return FILE_EXTENSIONS__YAML.includes(extension);\n}\n\n/**\n * Top-level validator. Prepares common values, required for the validation, then calles the validator and prepares\n * the result for the output.\n * @param {ValidationHandler}   validationHandler       The handler which performs the validation. It will receive the\n *                                                      statistics-object as argument and has to return an Array of\n *                                                      errors (or an empty Array, when all examples are valid)\n * @returns {ValidationResponse}\n * @private\n */\nfunction _validate(validationHandler) {\n    const statistics = _initStatistics(),\n        errors = validationHandler(statistics);\n    return createValidationResponse({ errors, statistics });\n}\n\n/**\n * Validates examples by a mapping-file.\n * @param {Object}                  openapiSpec                     OpenAPI-spec\n * @param {Object}                  mapExternalExamples             Mapping-file containing JSON-paths to schemas as\n *                                                                  key and a single file-path or Array of file-paths\n *                                                                  to external examples\n * @param {ValidationStatistics}    statistics                      Validation-statistics\n * @param {boolean}                 [cwdToMappingFile=false]        Change working directory for resolving the example-\n *                                                                  paths (relative to the mapping-file)\n * @param {string}                  [dirPathMapExternalExamples]    The directory-path of the mapping-file\n * @param {Array.<string>} [ignoreFormats]          List of datatype formats that shall be ignored (to prevent\n *                                                  \"unsupported format\" errors). If an Array with only one string is\n *                                                  provided where the formats are separated with `\\n`, the entries\n *                                                  will be expanded to a new array containing all entries.\n * @returns {Array.<ApplicationError>}\n * @private\n */\nfunction _handleExamplesByMapValidation(openapiSpec, mapExternalExamples, statistics,\n    { cwdToMappingFile = false, dirPathMapExternalExamples, ignoreFormats }\n) {\n    return flatMap(Object.entries(mapExternalExamples), ([pathSchema, filePathsExample]) => {\n        let schema = null;\n        try {\n            schema = _extractSchema(_getSchmaPointer(pathSchema, openapiSpec), openapiSpec);\n        } catch (/** @type ErrorJsonPathNotFound */ err) {\n            // If the schema can't be found, don't even attempt to process the examples\n            return ApplicationError.create(err);\n        }\n        return flatMap(\n            flatten([filePathsExample]),\n            filePathExample => {\n                let examples = [];\n                try {\n                    const resolvedFilePathExample = cwdToMappingFile\n                        ? path.join(dirPathMapExternalExamples, filePathExample)\n                        : filePathExample;\n                    const globResolvedFilePathExample = glob.sync(resolvedFilePathExample);\n                    if (globResolvedFilePathExample.length === 0) {\n                        return [ApplicationError.create({\n                            type: ErrorType.jsENOENT,\n                            message: `No such file or directory: '${resolvedFilePathExample}'`,\n                            path: resolvedFilePathExample\n                        })];\n                    }\n                    for (const filePathExample of globResolvedFilePathExample) {\n                        examples.push({\n                            path: path.normalize(filePathExample),\n                            content: JSON.parse(fs.readFileSync(filePathExample, 'utf-8'))\n                        });\n                    }\n                } catch (err) {\n                    return [ApplicationError.create(err)];\n                }\n                return flatMap(examples, example => _validateExample({\n                    createValidator: _initValidatorFactory(openapiSpec, { ignoreFormats }),\n                    schema,\n                    example: example.content,\n                    statistics,\n                    filePathExample: example.path\n                }));\n            }\n        );\n    });\n}\n\n\n/**\n * Merges two `ValidationResponses` together and returns the merged result. The passed `ValidationResponse`s won't be\n * modified.\n * @param {ValidationResponse} response1\n * @param {ValidationResponse} response2\n * @returns {ValidationResponse}\n * @private\n */\nfunction _mergeValidationResponses(response1, response2) {\n    return createValidationResponse({\n        errors: response1.errors.concat(response2.errors),\n        statistics: Object.entries(response1.statistics)\n            .reduce((res, [key, val]) => {\n                if (PROP__SCHEMAS_WITH_EXAMPLES === key) {\n                    [\n                        response1,\n                        response2\n                    ].forEach(response => {\n                        const schemasWithExample = response.statistics[SYM__INTERNAL][PROP__SCHEMAS_WITH_EXAMPLES]\n                            .values();\n                        for (let schema of schemasWithExample) {\n                            res[SYM__INTERNAL][PROP__SCHEMAS_WITH_EXAMPLES].add(schema);\n                        }\n                    });\n                    return res;\n                }\n                res[key] = val + response2.statistics[key];\n                return res;\n            }, _initStatistics())\n    });\n}\n\n/**\n * Extract JSON-pointer(s) for specific path from a OpenAPI-spec\n * @param {String}  path  JSON-path in the OpenAPI-Spec\n * @param {Object}  openapiSpec         OpenAPI-spec\n * @returns {Array.<String>} JSON-pointers to matching elements\n * @private\n */\nfunction _pathToPointer(path, openapiSpec) {\n    return jsonPath({\n        json: openapiSpec,\n        path: path,\n        resultType: ResultType.pointer\n    });\n}\n/**\n * Extract JSON-pointer(s) for specific path from a OpenAPI-spec\n * @param {String}  path  JSON-path in the OpenAPI-Spec\n * @param {Object}  openapiSpec         OpenAPI-spec\n * @returns {String} JSON-pointer to schema or throws error\n * @private\n */\nfunction _getSchmaPointer(pathSchema, openapiSpec) {\n    const schemaPointers = _pathToPointer(pathSchema, openapiSpec);\n    if (schemaPointers.length === 0) {\n        _pathToSchemaNotFoundError(pathSchema);\n    }\n    if (schemaPointers.length > 1) {\n        return [ApplicationError.create({\n            type: ErrorType.jsonPathNotFound,\n            message: `Path to schema cannot identify unique schema: '${pathSchema}'`,\n            path: pathSchema\n        })];\n    }\n    return schemaPointers[0];\n}\n\n/**\n * Validates examples at the given paths in the OpenAPI-spec.\n * @param {Object}          impl            Spec-dependant validator\n * @param {Array.<String>}  pathsExamples   JSON-paths to examples\n * @param {Object}          openapiSpec     OpenAPI-spec\n * @param {Array.<string>} [ignoreFormats]  List of datatype formats that shall be ignored (to prevent\n *                                          \"unsupported format\" errors). If an Array with only one string is\n *                                          provided where the formats are separated with `\\n`, the entries\n *                                          will be expanded to a new array containing all entries.\n * @returns {ValidationResponse}\n * @private\n */\nfunction _validateExamplesPaths({ impl }, pathsExamples, openapiSpec, { ignoreFormats }) {\n    const statistics = _initStatistics(),\n        validationResult = {\n            valid: true,\n            statistics,\n            errors: []\n        },\n        createValidator = _initValidatorFactory(openapiSpec, { ignoreFormats });\n    let validationMap;\n    try {\n        // Create mapping between JSON-schemas and examples\n        validationMap = impl.buildValidationMap(pathsExamples);\n    } catch (error) {\n        // Throw unexpected errors\n        if (!(error instanceof ApplicationError)) {\n            throw error;\n        }\n        // Add known errors and stop\n        validationResult.valid = false;\n        validationResult.errors.push(error);\n        return validationResult;\n    }\n    // Start validation\n    const schemaPointers = Object.keys(validationMap);\n    schemaPointers.forEach(schemaPointer => {\n        _validateSchema({\n            openapiSpec, createValidator, schemaPointer, validationMap, statistics,\n            validationResult\n        });\n    });\n    return validationResult;\n}\n\n/**\n * Validates a single schema.\n * @param {Object}                  openapiSpec         OpenAPI-spec\n * @param {ajv}                     createValidator     Factory, to create JSON-schema validator\n * @param {string}                  schemaPointer          JSON-pointer to schema (for request- or response-property)\n * @param {Object.<String, String>} validationMap Map with schema-pointers as key and example-pointers as value\n * @param {Object}                  statistics          Object to contain statistics metrics\n * @param {Object}                  validationResult    Container, for the validation-results\n * @private\n */\nfunction _validateSchema({\n    openapiSpec, createValidator, schemaPointer, validationMap, statistics,\n    validationResult\n}) {\n    const errors = validationResult.errors;\n    validationMap[schemaPointer].forEach(pathExample => {\n        const example = _getByPointer(pathExample, openapiSpec),\n            // Examples with missing schemas may occur and those are considered valid\n            schema = _extractSchema(schemaPointer, openapiSpec, true);\n        const curErrors = _validateExample({\n            createValidator,\n            schema,\n            example,\n            statistics\n        }).map(error => {\n            error.examplePath = pathExample;\n            return error;\n        });\n        if (!curErrors.length) {\n            return;\n        }\n        validationResult.valid = false;\n        errors.splice(errors.length - 1, 0, ...curErrors);\n    });\n}\n\n/**\n * Creates a container-object for the validation statistics.\n * @returns {ValidationStatistics}\n * @private\n */\nfunction _initStatistics() {\n    const statistics = {\n        [SYM__INTERNAL]: {\n            [PROP__SCHEMAS_WITH_EXAMPLES]: new Set()\n        },\n        examplesTotal: 0,\n        examplesWithoutSchema: 0\n    };\n    Object.defineProperty(statistics, PROP__SCHEMAS_WITH_EXAMPLES, {\n        enumerable: true,\n        get: () => statistics[SYM__INTERNAL][PROP__SCHEMAS_WITH_EXAMPLES].size\n    });\n    return statistics;\n}\n\n/**\n * Extract object by the given JSON-pointer\n * @param {String}      pointer JSON-pointer\n * @param {Object}      json JSON to extract the object(s) from\n * @returns {Object}    Extracted object\n */\nfunction _getByPointer(pointer, json) {\n    try {\n        return jsonPointer.get(json, pointer);\n    } catch (_) {\n        return undefined;\n    }\n}\n\n/**\n * Validates example against the schema. The precondition for this function to work is that the example exists at the\n * given path.\n * `pathExample` and `filePathExample` are exclusively mandatory.\n * itself\n * @param {Function}    createValidator     Factory, to create JSON-schema validator\n * @param {Object}      schema              JSON-schema\n * @param {Object}      example             Example to validate\n * @param {Object}      statistics          Object to contain statistics metrics\n * @param {String}      [filePathExample]   File-path to the example file\n * @returns {Array.<Object>} Array with errors. Empty array, if examples are valid\n * @private\n */\nfunction _validateExample({ createValidator, schema, example, statistics, filePathExample }) {\n    const\n        errors = [];\n    statistics.examplesTotal++;\n    // No schema, no validation (Examples without schema are considered valid)\n    if (!schema) {\n        statistics.examplesWithoutSchema++;\n        return errors;\n    }\n    statistics[SYM__INTERNAL][PROP__SCHEMAS_WITH_EXAMPLES].add(schema);\n    const validate = compileValidate(createValidator(), schema);\n    if (validate(example)) {\n        return errors;\n    }\n    return errors.concat(...validate.errors.map(ApplicationError.create))\n        .map(error => {\n            if (!filePathExample) {\n                return error;\n            }\n            error.exampleFilePath = filePathExample;\n            return error;\n        });\n}\n\n/**\n * Create a new instance of a JSON schema validator\n * @returns {ajv}\n * @private\n */\nfunction _initValidatorFactory(specSchema, { ignoreFormats }) {\n    return getValidatorFactory(specSchema, {\n        schemaId: 'auto',\n        discriminator: true,\n        strict: false,\n        allErrors: true,\n        formats: ignoreFormats && ignoreFormats.reduce((result, entry) => {\n            result[entry] = () => true;\n            return result;\n        }, {})\n    });\n}\n\n/**\n * Extracts the schema in the OpenAPI-spec at the given JSON-pointer.\n * @param   {string}    schemaPointer                          JSON-pointer to the schema\n * @param   {Object}    openapiSpec                         OpenAPI-spec\n * @param   {boolean}   [suppressErrorIfNotFound=false]     Don't throw `ErrorJsonPathNotFound` if the response does not\n *                                                          exist at the given JSON-pointer\n * @returns {Object|Array.<Object>|undefined} Matching schema(s)\n * @throws  {ErrorJsonPathNotFound} Thrown, when there is no schema at the given path and\n *                                  `suppressErrorIfNotFound` is false\n * @private\n */\nfunction _extractSchema(schemaPointer, openapiSpec, suppressErrorIfNotFound = false) {\n    const schema = _getByPointer(schemaPointer, openapiSpec);\n    if (!suppressErrorIfNotFound && !schema) {\n        _pathToSchemaNotFoundError(schemaPointer);\n    }\n    return schema;\n}\n\nfunction _pathToSchemaNotFoundError(schemaPointer) {\n    throw new ErrorJsonPathNotFound(`Path to schema can't be found: '${schemaPointer}'`, {\n        params: {\n            path: schemaPointer\n        }\n    });\n}\n","/**\n * Entry point for logic that only applies to specific versions of the OpenAPI-spec\n */\n\nconst implV2 = require('./v2/index'),\n    implV3 = require('./v3/index');\n\nconst REGEX__OPEN_API = /^3\\./;\n\nmodule.exports = {\n    getImplementation\n};\n\n/**\n * Get the version-specific implementation for the OpenAPI-spec. Currently v2 and v3 are supported\n * @param {Object}  openapiSpec OpenAPI-spec\n * @returns {Object|null}\n */\nfunction getImplementation(openapiSpec) {\n    if (typeof openapiSpec.swagger === 'string') {\n        return implV2;\n    }\n    if (openapiSpec.openapi && openapiSpec.openapi.match(REGEX__OPEN_API)) {\n        return implV3;\n    }\n    return null;\n}\n","/**\n * Wrapper for the JSONSchema-validator\n */\n\nconst { JSONPath: jsonPath } = require('jsonpath-plus'),\n    JsonPointer = require('json-pointer'),\n    Ajv = require('ajv-draft-04'),\n    addFormats = require('ajv-formats');\n\nconst PROP__ID = '$id',\n    JSON_PATH__REFS = '$..\\$ref',\n    ID__SPEC_SCHEMA = 'https://www.npmjs.com/package/openapi-examples-validator/defs.json',\n    ID__RESPONSE_SCHEMA = 'https://www.npmjs.com/package/openapi-examples-validator/schema.json';\n\nmodule.exports = {\n    getValidatorFactory,\n    compileValidate\n};\n\n/**\n * Get a factory-function to create a prepared validator-instance\n * @param {Object}  specSchema  OpenAPI-spec of which potential local references will be extracted\n * @param {Object}  [options]   Options for the validator\n * @returns {function(): (ajv | ajv.Ajv)}\n */\nfunction getValidatorFactory(specSchema, options) {\n    const preparedSpecSchema = _createReferenceSchema(specSchema);\n    return () => {\n        const validator = new Ajv(options);\n        addFormats(validator);\n\n        validator.addSchema(preparedSpecSchema);\n\n        return validator;\n    };\n}\n\n/**\n * Compiles the validator-function.\n * @param {ajv | ajv.Ajv}   validator       Validator-instance\n * @param {Object}          responseSchema  The response-schema, against the examples will be validated\n * @returns {ajv.ValidateFunction}\n */\nfunction compileValidate(validator, responseSchema) {\n    const preparedResponseSchema = _prepareResponseSchema(responseSchema, ID__RESPONSE_SCHEMA);\n    _replaceRefsToPreparedSpecSchema(preparedResponseSchema);\n\n    let result;\n    try {\n        result = validator.compile(preparedResponseSchema);\n    } catch (e) {\n        result = () => {};\n        result.errors = [e];\n    }\n    return result;\n}\n\n/**\n * Prepares the schema, to be used with internal-references\n * @param {Object}  specSchema  The schema to be prebared\n * @param {String}  idSchema    The unique ID for the schema\n * @returns {Object}\n * @private\n */\nfunction _prepareResponseSchema(specSchema, idSchema) {\n    const preparedSchema = Object.assign({}, specSchema);\n    preparedSchema[PROP__ID] = idSchema;\n    return preparedSchema;\n}\n\n/**\n * Replaces all internal references to the schema, with the extracted references, based on the origin OpenAPI-spec\n * @param {Object}  schema  The schema, containing references have to be replaced\n * @private\n */\nfunction _replaceRefsToPreparedSpecSchema(schema) {\n    jsonPath({\n        path: JSON_PATH__REFS,\n        json: schema,\n        callback(value, type, payload) {\n            if (!value.startsWith('#')) { return; }\n            payload.parent[payload.parentProperty] = `${ ID__SPEC_SCHEMA }${ value }`;\n        }\n    });\n}\n\n/**\n * Extracts all references and returns a new schema, containing only those.\n * @param {Object} specSchema   Schema, which references shall be extracted\n * @returns {Object}\n * @private\n */\nfunction _createReferenceSchema(specSchema) {\n    const refSchema = {\n        [PROP__ID]: ID__SPEC_SCHEMA\n    };\n    jsonPath({\n        path: JSON_PATH__REFS,\n        json: specSchema,\n        callback(value) {\n            if (!value.startsWith('#')) { return; }\n            const pointer = value.substring(1),\n                definition = JsonPointer.get(specSchema, pointer);\n            JsonPointer.set(refSchema, pointer, definition);\n        }\n    });\n    return refSchema;\n}\n","module.exports = require(\"lodash.flatmap\");","module.exports = require(\"json-schema-ref-parser\");","module.exports = require(\"lodash.merge\");","module.exports = {\"name\":\"openapi-examples-validator\",\"version\":\"6.0.3\",\"description\":\"Validates embedded examples in OpenAPI-JSONs\",\"main\":\"dist/index.js\",\"engines\":{\"node\":\">=18\"},\"bin\":{\"openapi-examples-validator\":\"dist/cli.js\"},\"standard-version\":{\"scripts\":{\"postchangelog\":\"npm run release:create-dockerfile && npm run release:stage-artifacts\"}},\"scripts\":{\"start-dev\":\"babel-node src/cli\",\"build\":\"npm run build:clean && npm run build:webpack\",\"build:clean\":\"rimraf dist\",\"build:webpack\":\"webpack --bail --progress --profile --mode production --config ./webpack/config.babel.js\",\"coverage\":\"rimraf ./coverage && nyc --reporter=lcov --reporter=text -x \\\"dist/**/*\\\" -x \\\"test/**/*.js\\\" npm test\",\"coveralls\":\"cat ./coverage/lcov.info | coveralls\",\"test\":\"npm run build && npm run test:mocha\",\"test-mutations\":\"stryker run\",\"test:mocha\":\"mocha --require \\\"./test/util/setup-tests\\\" --recursive \\\"./test/specs/**/*.js\\\"\",\"release\":\"npm run build && standard-version -a\",\"release:create-dockerfile\":\"npm run build && node etc/src/build-dockerfile.js\",\"release:stage-artifacts\":\"git add dist/*\"},\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/codekie/openapi-examples-validator.git\"},\"keywords\":[\"swagger\",\"openapi\",\"json\",\"validate\",\"examples\"],\"author\":\"Josua Amann\",\"license\":\"MIT\",\"bugs\":{\"url\":\"https://github.com/codekie/openapi-examples-validator/issues\"},\"homepage\":\"https://github.com/codekie/openapi-examples-validator#readme\",\"devDependencies\":{\"@babel/cli\":\"^7.27.0\",\"@babel/core\":\"^7.26.10\",\"@babel/eslint-parser\":\"^7.27.0\",\"@babel/node\":\"^7.26.0\",\"@babel/preset-env\":\"^7.26.9\",\"@babel/register\":\"^7.25.9\",\"@stryker-mutator/core\":\"^8.7.1\",\"@stryker-mutator/mocha-runner\":\"^8.7.1\",\"babel-loader\":\"^9.2.1\",\"chai\":\"^4.3.6\",\"chai-string\":\"^1.6.0\",\"core-js-pure\":\"^3.41.0\",\"coveralls\":\"^3.1.1\",\"eslint\":\"^8.41.0\",\"eslint-webpack-plugin\":\"^4.2.0\",\"json-loader\":\"^0.5.7\",\"mocha\":\"^10.8.2\",\"mocha-lcov-reporter\":\"^1.3.0\",\"nyc\":\"^15.1.0\",\"rimraf\":\"^5.0.1\",\"standard-version\":\"^9.5.0\",\"stryker-cli\":\"^1.0.2\",\"webpack\":\"^5.99.5\",\"webpack-cli\":\"^5.1.4\"},\"dependencies\":{\"ajv\":\"^8.17.1\",\"ajv-draft-04\":\"^1.0.0\",\"ajv-formats\":\"^2.1.1\",\"commander\":\"^6.2.1\",\"errno\":\"^1.0.0\",\"glob\":\"^8.1.0\",\"json-pointer\":\"^0.6.2\",\"json-schema-ref-parser\":\"^9.0.9\",\"jsonpath-plus\":\"^10.3.0\",\"lodash.clonedeep\":\"^4.5.0\",\"lodash.flatmap\":\"^4.5.0\",\"lodash.flatten\":\"^4.4.0\",\"lodash.merge\":\"^4.6.2\",\"yaml\":\"^2.7.1\"}}","module.exports = require(\"ajv-draft-04\");","module.exports = require(\"commander\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","const { JSONPath: jsonPath } = require('jsonpath-plus'),\n    ResultType = require('../../const/result-type');\n\nmodule.exports = {\n    applyCallbackToAllObjectModels\n};\n\n/**\n * @typedef {{\n *     path: String,\n *     value: Object,\n *     parent: Object,\n *     parentProperty: String,\n *     hasArrExpr: Boolean\n * }} JsonPathMatchData\n */\n\n/**\n * Callback that is applied to a JSONPath-match.\n * @callback JsonPathMatchCallback\n * @param {Object}              value       Value of the matched property\n * @param {String}              resultType  Result-type of the query\n * @param {JsonPathMatchData}   data        Object that contains additional data to the match\n */\n\n/**\n * Function to build a callback that is applied to a JSONPath-match.\n * @callback JsonPathMatchCallbackBuilder\n * @param {string}                 jsPath  Path to the property that matched\n * @return {JsonPathMatchCallback}         Callback that is applied to a JSONPath-match\n */\n\n/**\n * Apply the input rule to all models of type object in the input openApiSpec\n * @param {Object}                 openApiSpec           The to-be-modified schema\n * @param {Array.<String>}         [examplePaths]        The paths to the examples, which's content must not be modified\n * @param {JsonPathMatchCallbackBuilder}  [matchCallbackBuilder]  Function to build a callback\n *                                                                that will be called on each match\n */\nfunction applyCallbackToAllObjectModels(openApiSpec, examplePaths, matchCallbackBuilder) {\n    // Find all matches\n    const paths = new Set();\n    _find(openApiSpec, '$..schema..')\n        .forEach(match => {\n            if (_isPropertiesDefinition(match)) { return; }\n            paths.add(match);\n        });\n    // Exclude examples\n    _excludeExamples(openApiSpec, paths, examplePaths);\n    // Set flag\n    for (const jsPath of paths) {\n        const callback = matchCallbackBuilder(jsPath);\n        _find(openApiSpec, jsPath, ResultType.value, (result, resultType, data) => {\n            if (!_isObjectDefinition(result)) { return; }\n            callback(result, resultType, data);\n        });\n    }\n}\n\n/**\n * Find matching elements in JSON.\n * @param {Object}                  json                JSON to be searched\n * @param {String}                  path                JSON-path to search\n * @param {String}                  [resultType=\"path\"] Result-type of the query\n * @param {JsonPathMatchCallback}   [callback]          Function to be called on a match\n * @returns {any} Result of the query, depending on the `resultType`\n * @private\n */\nfunction _find(json, path, resultType = ResultType.path, callback) {\n    return jsonPath({\n        json,\n        path,\n        flatten: true,\n        resultType,\n        callback\n    });\n}\n\n/**\n * Remove JSON-paths from `paths` that are included in `examplePaths`\n * @param {Object}          openApiSpec     Open-API spec to search in\n * @param {Set.<String>}    paths           Paths where the examples have to be removed from\n * @param {Array.<String>}  examplePaths    JSON-paths of the examples\n * @private\n */\nfunction _excludeExamples(openApiSpec, paths, examplePaths) {\n    examplePaths\n        .forEach(examplePath => {\n            _find(openApiSpec, examplePath)\n                .forEach(exampleMatch => {\n                    for (const jsPath of paths) {\n                        jsPath.startsWith(exampleMatch) && paths.delete(jsPath);\n                    }\n                });\n        });\n}\n\nfunction _isPropertiesDefinition(path) {\n    // Path has to end with `properties`\n    if (!path.match(/\\['properties']$/)) { return; }\n    // Every second consecutive `properties` actually is not a property-definition, but a property itself\n    const consecutiveMatch = path.match(/(?<!\\['properties'])(\\['properties']\\['properties'])+$/);\n    return !consecutiveMatch || consecutiveMatch.length % 2 !== 0;\n}\n\nfunction _isObjectDefinition(entity) {\n    return entity && (entity.type === 'object' || entity.properties);\n}\n","module.exports = require(\"jsonpath-plus\");","module.exports = require(\"lodash.clonedeep\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(115);\n"],"names":["VERSION","require","program","validateFile","validateExample","validateExamplesByMap","ENV_TEST","process","env","OPENAPI_EXAMPLES_VALIDATOR_TESTS","version","arguments","description","option","action","async","filepath","options","schemaJsonpath","exampleFilepath","mappingFilepath","cwdToMappingFile","allPropertiesRequired","noAdditionalProperties","additionalProperties","ignoreFormats","Array","isArray","length","indexOf","split","filter","entry","match","_prepareIgnoreFormats","result","console","log","noExit","statistics","schemasWithExamples","examplesWithoutSchema","examplesTotal","matchingFilePathsMapping","strStatistics","push","stdout","write","join","_printStatistics","valid","exit","stderr","JSON","stringify","errors","_handleResult","on","module","exports","parseAsync","argv","cloneDeep","setAllPropertiesRequired","setNoAdditionalProperties","getJsonPathsToExamples","buildValidationMap","pathsExamples","reduce","validationMap","pathExample","pathSchema","examplePointer","pathSegs","idxExamples","lastIndexOf","splice","_getSchemaPointerOfExample","Set","add","prepare","openapiSpec","openapiSpecCopy","parent","parentProperty","path","pointer","value","applyCallbackToAllObjectModels","openApiSpec","examplePaths","hasOwnProperty","required","Object","keys","properties","hasJsonCombinerParentRegex","RegExp","JSON_SCHEMA_COMBINERS","schema","test","warn","some","combiner","refParser","createValidationResponse","dereferenceJsonSchema","pathToSchema","jsonSchema","currentWorkingDir","cwd","chdir","dirname","dereferencedSchema","dereference","ApplicationError","ErrorType","RESPONSES","REQUEST","SINGLE_EXAMPLE","MANY_EXAMPLES","PATH__EXAMPLE","PATH__EXAMPLES","PATH__EXAMPLE__REQUEST_BODY","PATH__EXAMPLES__REQUEST_BODY","ExampleType","exampleTypesOfSchemas","Map","pathSchemaAsArray","exampleType","idxExample","exampleTypeOfSchema","get","pathContextAsArray","slice","create","type","errorAndErrorsMutuallyExclusive","message","params","pathContext","_throwMutuallyExclusiveError","set","merge","ENOENT","jsENOENT","code","jsonPathNotFound","parseError","validation","err","cause","constructor","assign","this","flatten","flatMap","jsonPointer","fs","glob","yaml","JSONPath","jsonPath","createError","ResultType","getValidatorFactory","compileValidate","Determiner","SYM__INTERNAL","Symbol","PROP__SCHEMAS_WITH_EXAMPLES","FILE_EXTENSIONS__YAML","ErrorJsonPathNotFound","validateExamples","impl","getImplementation","res","pathToExamples","concat","_pathToPointer","_initStatistics","validationResult","createValidator","_initValidatorFactory","error","forEach","schemaPointer","example","_getByPointer","_extractSchema","curErrors","_validateExample","map","examplePath","_validateSchema","_validateExamplesPaths","_parseSpec","filePath","isYaml","extension","pop","includes","_isFileTypeYaml","parse","readFileSync","e","name","_validate","validationHandler","_handleExamplesByMapValidation","mapExternalExamples","dirPathMapExternalExamples","entries","filePathsExample","_getSchmaPointer","filePathExample","examples","resolvedFilePathExample","globResolvedFilePathExample","sync","normalize","content","json","resultType","schemaPointers","_pathToSchemaNotFoundError","defineProperty","enumerable","size","_","validate","exampleFilePath","specSchema","schemaId","discriminator","strict","allErrors","formats","suppressErrorIfNotFound","filePathSchema","globMapExternalExamples","filePathsMaps","nonull","responses","filePathMapExternalExamples","mapFilePath","response","response2","response1","key","val","schemasWithExample","values","implV2","implV3","REGEX__OPEN_API","swagger","openapi","JsonPointer","Ajv","addFormats","PROP__ID","JSON_PATH__REFS","ID__SPEC_SCHEMA","preparedSpecSchema","refSchema","callback","startsWith","substring","definition","_createReferenceSchema","validator","addSchema","responseSchema","preparedResponseSchema","preparedSchema","_prepareResponseSchema","payload","compile","_find","matchCallbackBuilder","paths","consecutiveMatch","_isPropertiesDefinition","exampleMatch","jsPath","delete","_excludeExamples","data","entity","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}