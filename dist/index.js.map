{"version":3,"file":"index.js","mappings":"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","sources":["webpack://openapi-examples-validator/external commonjs \"yaml\"","webpack://openapi-examples-validator/external commonjs \"lodash.flatten\"","webpack://openapi-examples-validator/external commonjs \"errno\"","webpack://openapi-examples-validator/external commonjs \"json-pointer\"","webpack://openapi-examples-validator/./src/impl/v2/index.js","webpack://openapi-examples-validator/./src/const/result-type.js","webpack://openapi-examples-validator/./src/impl/service/all-properties-required.js","webpack://openapi-examples-validator/./src/impl/service/no-additional-properties.js","webpack://openapi-examples-validator/external commonjs \"ajv-formats\"","webpack://openapi-examples-validator/external commonjs \"glob\"","webpack://openapi-examples-validator/./src/utils/index.js","webpack://openapi-examples-validator/./src/impl/v3/index.js","webpack://openapi-examples-validator/./src/application-error.js","webpack://openapi-examples-validator/./src/index.js","webpack://openapi-examples-validator/./src/impl/index.js","webpack://openapi-examples-validator/./src/validator.js","webpack://openapi-examples-validator/external commonjs \"lodash.flatmap\"","webpack://openapi-examples-validator/external commonjs \"json-schema-ref-parser\"","webpack://openapi-examples-validator/external commonjs \"lodash.merge\"","webpack://openapi-examples-validator/external commonjs \"ajv-draft-04\"","webpack://openapi-examples-validator/external node-commonjs \"fs\"","webpack://openapi-examples-validator/external node-commonjs \"path\"","webpack://openapi-examples-validator/./src/impl/service/common.js","webpack://openapi-examples-validator/external commonjs \"jsonpath-plus\"","webpack://openapi-examples-validator/external commonjs \"lodash.clonedeep\"","webpack://openapi-examples-validator/webpack/bootstrap","webpack://openapi-examples-validator/webpack/startup"],"sourcesContent":["module.exports = require(\"yaml\");","module.exports = require(\"lodash.flatten\");","module.exports = require(\"errno\");","module.exports = require(\"json-pointer\");","/**\n * Contains validation-logic that is specific to V2 of the OpenAPI-spec\n */\n\nconst cloneDeep = require('lodash.clonedeep'),\n    { setAllPropertiesRequired } = require('../service/all-properties-required'),\n    { setNoAdditionalProperties } = require('../service/no-additional-properties');\n\n// CONSTANTS\n\nconst PATH__EXAMPLES = '$..examples[?(@property && typeof @property === \"string\" && @property.match(/[\\/+]json/))]',\n    PROP__SCHEMA = 'schema',\n    PROP__EXAMPLES = 'examples';\n\nmodule.exports = {\n    buildValidationMap,\n    getJsonPathsToExamples,\n    prepare\n};\n\n// IMPLEMENTATION DETAILS\n\n/**\n * Get the JSONPaths to the examples\n * @returns {Array.<String>}    JSONPaths to the examples\n */\nfunction getJsonPathsToExamples() { return [PATH__EXAMPLES]; }\n\n\n\n/**\n * Builds a map with the json-pointers to the response-schema as key and the json-pointers to the examples, as value.\n * The pointer of the schema is derived from the pointer to the example and doesn't necessarily mean\n * that the schema actually exists.\n * @param {Array.<String>}  pathsExamples   Paths to the examples\n * @returns {Object.<String, String>} Map with schema-pointers as key and example-pointers as value\n * @private\n */\nfunction buildValidationMap(pathsExamples) {\n    return pathsExamples.reduce((validationMap, pathExample) => {\n        const pathSchema = _getSchemaPointerOfExample(pathExample);\n        validationMap[pathSchema] = (validationMap[pathSchema] || new Set())\n            .add(pathExample);\n        return validationMap;\n    }, {});\n}\n\n/**\n * Pre-processes the OpenAPI-spec, for further use.\n * The passed spec won't be modified. If a modification happens, a modified copy will be returned.\n * @param {Object}  openapiSpec                     The OpenAPI-spec as JSON-schema\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not defined in the schema\n * @param {boolean} [allPropertiesRequired=false]   Make all properties required\n * @return {Object} The prepared OpenAPI-spec\n */\nfunction prepare(openapiSpec, { noAdditionalProperties, allPropertiesRequired } = {}) {\n    const openapiSpecCopy = cloneDeep(openapiSpec);\n    noAdditionalProperties && setNoAdditionalProperties(openapiSpecCopy, getJsonPathsToExamples());\n    allPropertiesRequired && setAllPropertiesRequired(openapiSpecCopy, getJsonPathsToExamples());\n    return openapiSpecCopy;\n}\n\n/**\n * Gets a JSON-pointer to the corresponding response-schema, based on a JSON-pointer to an example.\n * @param {String}  examplePointer JSON-pointer to example\n * @returns {String} JSON-pointer to the corresponding response-schema\n * @private\n */\nfunction _getSchemaPointerOfExample(examplePointer) {\n    const pathSegs = examplePointer.split('/'),\n        idxExamples = pathSegs.lastIndexOf(PROP__EXAMPLES);\n    pathSegs.splice(idxExamples, pathSegs.length - idxExamples, PROP__SCHEMA);\n    return pathSegs.join('/');\n}\n","module.exports = {\n    parent: 'parent',\n    parentProperty: 'parentProperty',\n    path: 'path',\n    pointer: 'pointer',\n    value: 'value'\n};\n","const { applyCallbackToAllObjectModels } = require('./common');\n\nmodule.exports = {\n    setAllPropertiesRequired\n};\n\n/**\n * Sets all properties of each object to required\n * @param {Object}                  openApiSpec         The to-be-modified schema\n * @param {Array.<String>}          [examplePaths=[]]   The paths to the examples, which's content must not be modified\n */\nfunction setAllPropertiesRequired(openApiSpec, examplePaths = []) {\n    applyCallbackToAllObjectModels(openApiSpec, examplePaths,\n        () => {\n            return (value) => {\n                if (value.hasOwnProperty('properties')) {\n                    value.required = Object.keys(value.properties);\n                }\n            };\n        });\n}\n","const { applyCallbackToAllObjectModels } = require('./common');\n\nmodule.exports = {\n    setNoAdditionalProperties\n};\n\nconst JSON_SCHEMA_COMBINERS = [\n    'oneOf',\n    'allOf',\n    'anyOf',\n    'not'\n];\n\n/**\n * Sets the flag to indicate that it doesn't allow properties that are not described in the schema\n * @param {Object}                  openApiSpec         The to-be-modified schema\n * @param {Array.<String>}          [examplePaths=[]]   The paths to the examples, which's content must not be modified\n */\nfunction setNoAdditionalProperties(openApiSpec, examplePaths = []) {\n    // Match all combiner keywords that are not preceded by a 'properties' keyword.\n    // This allow to have objects that have as property name one of the combiner keywords.\n    const hasJsonCombinerParentRegex\n        = new RegExp('(?<!\\\\[\\'properties\\'\\\\])\\\\[\\'(?:' + JSON_SCHEMA_COMBINERS.join('|') + ')\\'\\\\]');\n\n    applyCallbackToAllObjectModels(openApiSpec, examplePaths,\n        (path) => {\n            return (schema) => {\n                // Exclude schema that have a JSON combiner as parent\n                if (hasJsonCombinerParentRegex.test(path)) {\n                    console.warn('\"additionalProperties\" flag not set '\n                        + `for ${path} because it has a parent with a JSON-schema combiner keyword.`);\n                    return;\n                }\n                // Exclude schema that contains a JSON combiner\n                if (JSON_SCHEMA_COMBINERS.some((combiner) => schema.hasOwnProperty(combiner))) {\n                    console.warn('\"additionalProperties\" flag not set '\n                        + `for ${path} because it contains JSON-schema combiner keyword.`);\n                    return;\n                }\n                // Exclude schema that already contains additionalProperties\n                if (schema.hasOwnProperty('additionalProperties')) {\n                    return;\n                }\n                schema.additionalProperties = false;\n            };\n        });\n}\n","module.exports = require(\"ajv-formats\");","module.exports = require(\"glob\");","const path = require('path'),\n    refParser = require('json-schema-ref-parser');\n\nmodule.exports = {\n    createValidationResponse,\n    dereferenceJsonSchema\n};\n\n/**\n * Creates a unified response for the validation-result\n * @param {Array.<ApplicationError>}    errors\n * @param {ValidationStatistics}        statistics\n * @returns {ValidationResponse}\n * @private\n */\nfunction createValidationResponse({ errors, statistics = {} }) {\n    return {\n        valid: !errors.length,\n        statistics,\n        errors\n    };\n}\n\n/**\n * Includes all referenced, external schemas (by the keyword `$ref`) into the schema\n *\n * CAUTION: This function is not concurrency-safe !!\n * This function changes the working dir and sets it back. This may become an concurrency issue when there are\n * other tasks running that rely on the working dir while this function waits for the asynchronous task of\n * dereferencing to complete.\n *\n * @param {String} pathToSchema     File-path to the schema\n * @param {Object} jsonSchema       Schema with potential externally referenced schemas\n * @returns {Promise<Object>}       Dereferenced schema\n */\nasync function dereferenceJsonSchema(pathToSchema, jsonSchema) {\n    const currentWorkingDir = process.cwd();\n    // Change the working dir to the schema-path, to make sure that relative paths can be resolved\n    process.chdir(path.dirname(pathToSchema));\n    const dereferencedSchema = await refParser.dereference(jsonSchema);\n    // Restore original working dir\n    process.chdir(currentWorkingDir);\n    return dereferencedSchema;\n}\n","/**\n * Contains validation-logic that is specific to V3 of the OpenAPI-spec\n */\n\nconst cloneDeep = require('lodash.clonedeep'),\n    { ApplicationError, ErrorType } = require('../../application-error'),\n    { setAllPropertiesRequired } = require('../service/all-properties-required'),\n    { setNoAdditionalProperties } = require('../service/no-additional-properties');\n\n// CONSTANTS\n\n// eslint-disable-next-line max-len\nconst RESPONSES = '$..responses..content[?(@property && typeof @property === \"string\" && @property.match(/[\\/+]json/))]';\nconst REQUEST = '$..requestBody.content[?(@property && typeof @property === \"string\" && @property.match(/[\\/+]json/))]';\nconst SINGLE_EXAMPLE = '.example';\nconst MANY_EXAMPLES = '.examples.*.value';\n\nconst PATH__EXAMPLE = `${RESPONSES}${SINGLE_EXAMPLE}`,\n    PATH__EXAMPLES = `${RESPONSES}${MANY_EXAMPLES}`,\n    PATH__EXAMPLE__PARAMETER = '$..parameters..example',\n    PATH__EXAMPLES__PARAMETER = '$..parameters..examples.*.value',\n    PATH__EXAMPLE__REQUEST_BODY = `${REQUEST}${SINGLE_EXAMPLE}`,\n    PATH__EXAMPLES__REQUEST_BODY = `${REQUEST}${MANY_EXAMPLES}`,\n    PROP__SCHEMA = 'schema',\n    PROP__EXAMPLE = 'example',\n    PROP__EXAMPLES = 'examples';\n\nconst ExampleType = {\n    single: 'single',\n    multi: 'multi'\n};\n\n// PUBLIC API\n\nmodule.exports = {\n    buildValidationMap,\n    getJsonPathsToExamples,\n    prepare\n};\n\n// IMPLEMENTATION DETAILS\n\n/**\n * Get the JSONPaths to the examples\n * @returns {Array.<String>}    JSONPaths to the examples\n */\nfunction getJsonPathsToExamples() {\n    return [\n        PATH__EXAMPLE,\n        PATH__EXAMPLES,\n        PATH__EXAMPLE__PARAMETER,\n        PATH__EXAMPLES__PARAMETER,\n        PATH__EXAMPLE__REQUEST_BODY,\n        PATH__EXAMPLES__REQUEST_BODY\n    ];\n}\n\n/**\n * Builds a map with the json-pointers to the response-schema as key and the json-pointers to the examples, as value.\n * The pointer of the schema is derived from the pointer to the example and doesn't necessarily mean\n * that the schema actually exists.\n * @param {Array.<String>}  pathsExamples   Paths to the examples\n * @returns {Object.<String, String>} Map with schema-pointers as key and example-pointers as value\n * @private\n */\nfunction buildValidationMap(pathsExamples) {\n    const exampleTypesOfSchemas = new Map();\n    return pathsExamples.reduce((validationMap, pathExample) => {\n        const { pathSchemaAsArray, exampleType } = _getSchemaPointerOfExample(pathExample),\n            pathSchema = pathSchemaAsArray.join('/'),\n            exampleTypeOfSchema = exampleTypesOfSchemas.get(pathSchema);\n        if (exampleTypeOfSchema) {\n            exampleTypeOfSchema !== exampleType && _throwMutuallyExclusiveError(pathSchemaAsArray);\n        }\n        exampleTypesOfSchemas.set(pathSchema, exampleType);\n        validationMap[pathSchema] = (validationMap[pathSchema] || new Set())\n            .add(pathExample);\n        return validationMap;\n    }, {});\n}\n\n/**\n * Pre-processes the OpenAPI-spec, for further use.\n * The passed spec won't be modified. If a modification happens, a modified copy will be returned.\n * @param {Object}  openapiSpec     The OpenAPI-spec as JSON-schema\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not defined in the schema\n * @param {boolean} [allPropertiesRequired=false]   Make all properties required\n * @return {Object} The prepared OpenAPI-spec\n */\nfunction prepare(openapiSpec, { noAdditionalProperties, allPropertiesRequired } = {}) {\n    const openapiSpecCopy = cloneDeep(openapiSpec);\n    noAdditionalProperties && setNoAdditionalProperties(openapiSpecCopy, getJsonPathsToExamples());\n    allPropertiesRequired && setAllPropertiesRequired(openapiSpecCopy, getJsonPathsToExamples());\n    return openapiSpecCopy;\n}\n\n/**\n * Gets a JSON-pointer to the corresponding response-schema, based on a JSON-pointer to an example.\n *\n * It is assumed that the JSON-pointer to the example is valid and existing.\n * @param {String}  examplePointer JSON-pointer to example\n * @returns {{\n *     exampleType: ExampleType,\n *     pathSchema: String\n * }} JSON-path to the corresponding response-schema\n * @private\n */\nfunction _getSchemaPointerOfExample(examplePointer) {\n    const pathSegs = examplePointer.split('/'),\n        idxExample = pathSegs.lastIndexOf(PROP__EXAMPLE),\n        /** @type ExampleType */\n        exampleType = idxExample > -1\n            ? ExampleType.single\n            : ExampleType.multi,\n        idxExamples = exampleType === ExampleType.single\n            ? idxExample\n            : pathSegs.lastIndexOf(PROP__EXAMPLES);\n    pathSegs.splice(idxExamples, pathSegs.length - idxExamples, PROP__SCHEMA);\n    return {\n        exampleType,\n        pathSchemaAsArray: pathSegs\n    };\n}\n\n\n/**\n * Checks if only `example` or `examples` is set for the schema, as they are mutually exclusive by OpenAPI-spec.\n * @param {Array.<String>}  pathSchemaAsArray   JSON-path to the Schema, as JSON-path-array\n * @throws ApplicationError if both are set\n * @private\n */\nfunction _throwMutuallyExclusiveError(pathSchemaAsArray) {\n    const pathContextAsArray = pathSchemaAsArray.slice(0, pathSchemaAsArray.length - 1);    // Strip `schema` away\n    throw ApplicationError.create({\n        type: ErrorType.errorAndErrorsMutuallyExclusive,\n        message: 'Properties \"error\" and \"errors\" are mutually exclusive',\n        params: {\n            pathContext: pathContextAsArray.join('/')\n        }\n    });\n}\n","const\n    merge = require('lodash.merge'),\n    { ENOENT } = require('errno').code;\n\n// TYPEDEFINITIONS\n\n/**\n * @typedef {{}} CustomError\n * @augments Error\n */\n\n/**\n * ApplicationErrorOptions\n * @typedef {{\n *      [instancePath]: string,\n *      [examplePath]: string,\n *      [exampleFilePath]: string,\n *      [keyword]: string,\n *      [message]: string,\n *      [mapFilePath]: string,\n *      [params]: {\n *          [path]: string,\n *          [missingProperty]: string,\n *          [type]: string\n *      },\n *      [schemaPath]: string\n * }} ApplicationErrorOptions\n */\n\n// CONSTANTS\n\nconst ErrorType = {\n    jsENOENT: ENOENT.code,\n    jsonPathNotFound: 'JsonPathNotFound',\n    errorAndErrorsMutuallyExclusive: 'ErrorErrorsMutuallyExclusive',\n    parseError: 'ParseError',\n    validation: 'Validation'\n};\n\n// CLASSES\n\n/**\n * Unified application-error\n */\nclass ApplicationError {\n    /**\n     * Factory-function, which is able to consume validation-errors and JS-errors. If a validation error is passed, all\n     * properties will be adopted.\n     * @param {Error|CustomError}   err     Javascript-, validation- or custom-error, to create the application-error\n     *                                      from\n     * @returns {ApplicationError} Unified application-error instance\n     */\n    static create(err) {\n        const { code, message, path, cause } = err,               // Certain properties of Javascript-errors\n            type = code || err.type || ErrorType.validation,    // If `code` is available then it's a Javascript-error\n            options = { message };\n        if (ErrorType.validation === type || ErrorType.errorAndErrorsMutuallyExclusive === type) {\n            // For certain, created error-types, copy all properties\n            merge(options, err);\n        } else {\n            // Copy certain properties of Javascript-error (but only if available)\n            path && merge(options, { params: { path } });\n            cause && merge(options, cause);\n        }\n        return new ApplicationError(type, options);\n    }\n\n    /**\n     * Constructor\n     * @param {string}                  type        Type of error (see statics)\n     * @param {ApplicationErrorOptions} [options]   Optional properties\n     */\n    constructor(type, options = {}) {\n        Object.assign(this, {\n            type,\n            ...options\n        });\n    }\n}\n\n// PUBLIC API\n\nmodule.exports = {\n    ApplicationError,\n    ErrorType\n};\n","/**\n * Entry-point for the validator-API\n */\n\nconst\n    merge = require('lodash.merge'),\n    flatten = require('lodash.flatten'),\n    flatMap = require('lodash.flatmap'),\n    jsonPointer = require('json-pointer'),\n    fs = require('fs'),\n    path = require('path'),\n    glob = require('glob'),\n    yaml = require('yaml'),\n    { JSONPath: jsonPath } = require('jsonpath-plus'),\n    refParser = require('json-schema-ref-parser'),\n    { createError } = require('errno').custom,\n    ResultType = require('./const/result-type'),\n    { getValidatorFactory, compileValidate } = require('./validator'),\n    Determiner = require('./impl'),\n    { ApplicationError, ErrorType } = require('./application-error'),\n    { createValidationResponse, dereferenceJsonSchema } = require('./utils');\n\n// CONSTANTS\n\nconst SYM__INTERNAL = Symbol('internal'),\n    PROP__SCHEMAS_WITH_EXAMPLES = 'schemasWithExamples',\n    FILE_EXTENSIONS__YAML = [\n        'yaml',\n        'yml'\n    ];\n\n// STATICS\n\n/**\n * ErrorJsonPathNotFound\n * @typedef {{\n *      cause: {\n *          [params]: {\n *              [path]: string\n *          }\n *      }\n * }} ErrorJsonPathNotFound\n * @augments CustomError\n */\n\n/**\n * @constructor\n * @augments CustomError\n * @returns {ErrorJsonPathNotFound}\n */\nconst ErrorJsonPathNotFound = createError(ErrorType.jsonPathNotFound);\n\n// PUBLIC API\n\nmodule.exports = {\n    'default': validateExamples,\n    validateFile,\n    validateExample,\n    validateExamplesByMap\n};\n\n// IMPLEMENTATION DETAILS\n\n// Type definitions\n\n/**\n * ValidationStatistics\n * @typedef {{\n *      schemasWithExamples: number,\n *      examplesTotal: number,\n *      examplesWithoutSchema: number,\n *      [matchingFilePathsMapping]: number\n * }} ValidationStatistics\n */\n\n/**\n * ValidationResponse\n * @typedef {{\n *      valid: boolean,\n *      statistics: ValidationStatistics,\n *      errors: Array.<ApplicationError>\n * }} ValidationResponse\n */\n\n/**\n * @callback ValidationHandler\n * @param {ValidationStatistics}    statistics\n * @returns {Array.<ApplicationError>}\n */\n\n// Public\n\n/**\n * Validates OpenAPI-spec with embedded examples.\n * @param {Object}  openapiSpec OpenAPI-spec\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not defined in the schema\n * @param {boolean} [allPropertiesRequired=false]   Make all properties required\n * @param {Array.<string>} [ignoreFormats]          List of datatype formats that shall be ignored (to prevent\n *                                                  \"unsupported format\" errors). If an Array with only one string is\n *                                                  provided where the formats are separated with `\\n`, the entries\n *                                                  will be expanded to a new array containing all entries.\n * @returns {ValidationResponse}\n */\nasync function validateExamples(openapiSpec, { noAdditionalProperties, ignoreFormats, allPropertiesRequired } = {}) {\n    const impl = Determiner.getImplementation(openapiSpec);\n    openapiSpec = await refParser.dereference(openapiSpec);\n    openapiSpec = impl.prepare(openapiSpec, { noAdditionalProperties, allPropertiesRequired });\n    let pathsExamples = impl.getJsonPathsToExamples()\n        .reduce((res, pathToExamples) => {\n            return res.concat(_pathToPointer(pathToExamples, openapiSpec));\n        }, []);\n    return _validateExamplesPaths({ impl }, pathsExamples, openapiSpec, { ignoreFormats });\n}\n\n/**\n * Validates OpenAPI-spec with embedded examples.\n * @param {string}  filePath                        File-path to the OpenAPI-spec\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not defined in the schema\n * @param {boolean} [allPropertiesRequired=false]   Make all properties required\n * @param {Array.<string>} [ignoreFormats]          List of datatype formats that shall be ignored (to prevent\n *                                                  \"unsupported format\" errors). If an Array with only one string is\n *                                                  provided where the formats are separated with `\\n`, the entries\n *                                                  will be expanded to a new array containing all entries.\n * @returns {ValidationResponse}\n */\nasync function validateFile(filePath, { noAdditionalProperties, ignoreFormats, allPropertiesRequired } = {}) {\n    let openapiSpec = null;\n    try {\n        openapiSpec = await _parseSpec(filePath);\n    } catch (err) {\n        return createValidationResponse({ errors: [ApplicationError.create(err)] });\n    }\n    return validateExamples(openapiSpec, { noAdditionalProperties, ignoreFormats, allPropertiesRequired });\n}\n\n/**\n * Validates examples by mapping-files.\n * @param {string}  filePathSchema              File-path to the OpenAPI-spec\n * @param {string}  globMapExternalExamples     File-path (globs are supported) to the mapping-file containing JSON-\n *                                              paths to schemas as key and a single file-path or Array of file-paths\n *                                              to external examples\n * @param {boolean} [cwdToMappingFile=false]    Change working directory for resolving the example-paths (relative to\n *                                              the mapping-file)\n * @param {boolean} [noAdditionalProperties=false] Don't allow properties that are not defined in the schema\n * @param {boolean} [allPropertiesRequired=false]  Make all properties required\n * @param {Array.<string>} [ignoreFormats]      List of datatype formats that shall be ignored (to prevent\n *                                              \"unsupported format\" errors). If an Array with only one string is\n *                                              provided where the formats are separated with `\\n`, the entries\n *                                              will be expanded to a new array containing all entries.\n * @returns {ValidationResponse}\n */\nasync function validateExamplesByMap(filePathSchema, globMapExternalExamples,\n    { cwdToMappingFile, noAdditionalProperties, ignoreFormats, allPropertiesRequired } = {}\n) {\n    let matchingFilePathsMapping = 0;\n    const filePathsMaps = glob.sync(\n        globMapExternalExamples,\n        // Using `nonull`-option to explicitly create an app-error if there's no match for `globMapExternalExamples`\n        { nonull: true }\n    );\n    let responses = [];\n    // for..of here, to support sequential execution of async calls. This is required, since dereferencing the\n    // `openapiSpec` is not concurrency-safe\n    for (const filePathMapExternalExamples of filePathsMaps) {\n        let mapExternalExamples = null,\n            openapiSpec = null;\n        try {\n            mapExternalExamples = JSON.parse(fs.readFileSync(filePathMapExternalExamples, 'utf-8'));\n            openapiSpec = await _parseSpec(filePathSchema);\n            openapiSpec = Determiner.getImplementation(openapiSpec)\n                .prepare(openapiSpec, { noAdditionalProperties, allPropertiesRequired });\n        } catch (err) {\n            responses.push(createValidationResponse({ errors: [ApplicationError.create(err)] }));\n            continue;\n        }\n        // Not using `glob`'s response-length, because it is `1` if there's no match for `globMapExternalExamples`.\n        // Instead, increment on every match\n        matchingFilePathsMapping++;\n        responses.push(\n            _validate(\n                statistics => {\n                    return _handleExamplesByMapValidation(\n                        openapiSpec, mapExternalExamples, statistics, {\n                            cwdToMappingFile,\n                            dirPathMapExternalExamples: path.dirname(filePathMapExternalExamples),\n                            ignoreFormats\n                        }\n                    ).map(\n                        (/** @type ApplicationError */ error) => Object.assign(error, {\n                            mapFilePath: path.normalize(filePathMapExternalExamples)\n                        })\n                    );\n                }\n            )\n        );\n    }\n    return merge(\n        responses.reduce((res, response) => {\n            if (!res) {\n                return response;\n            }\n            return _mergeValidationResponses(res, response);\n        }, null),\n        { statistics: { matchingFilePathsMapping } }\n    );\n}\n\n/**\n * Validates a single external example.\n * @param {String}  filePathSchema                  File-path to the OpenAPI-spec\n * @param {String}  pathSchema                      JSON-path to the schema\n * @param {String}  filePathExample                 File-path to the external example-file\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not described in the schema\n * @param {boolean} [allPropertiesRequired=false]   Make all properties required\n * @param {Array.<string>} [ignoreFormats]          List of datatype formats that shall be ignored (to prevent\n *                                                  \"unsupported format\" errors). If an Array with only one string is\n *                                                  provided where the formats are separated with `\\n`, the entries\n *                                                  will be expanded to a new array containing all entries.\n * @returns {ValidationResponse}\n */\nasync function validateExample(filePathSchema, pathSchema, filePathExample, {\n    noAdditionalProperties,\n    ignoreFormats,\n    allPropertiesRequired\n} = {}) {\n    let example = null,\n        schema = null,\n        openapiSpec = null;\n    try {\n        example = JSON.parse(fs.readFileSync(filePathExample, 'utf-8'));\n        openapiSpec = await _parseSpec(filePathSchema);\n        openapiSpec = Determiner.getImplementation(openapiSpec)\n            .prepare(openapiSpec, { noAdditionalProperties, allPropertiesRequired });\n        schema = _extractSchema(_getSchmaPointer(pathSchema, openapiSpec), openapiSpec);\n    } catch (err) {\n        return createValidationResponse({ errors: [ApplicationError.create(err)] });\n    }\n    return _validate(\n        statistics => _validateExample({\n            createValidator: _initValidatorFactory(openapiSpec, { ignoreFormats }),\n            schema,\n            example,\n            statistics,\n            filePathExample\n        })\n    );\n}\n\n// Private\n\n/**\n * Parses the OpenAPI-spec (supports JSON and YAML)\n * @param {String}  filePath    File-path to the OpenAPI-spec\n * @returns {object}    Parsed OpenAPI-spec\n * @private\n */\nasync function _parseSpec(filePath) {\n    const isYaml = _isFileTypeYaml(filePath);\n    let jsonSchema;\n\n    if (isYaml) {\n        try {\n            jsonSchema = yaml.parse(fs.readFileSync(filePath, 'utf-8'));\n        } catch (e) {\n            const { name, message } = e;\n            throw new ApplicationError(ErrorType.parseError, { message: `${name}: ${message}` });\n        }\n    } else {\n        jsonSchema = JSON.parse(fs.readFileSync(filePath, 'utf-8'));\n    }\n\n    return await dereferenceJsonSchema(filePath, jsonSchema);\n}\n\n/**\n * Determines whether the filePath is pointing to a YAML-file\n * @param {String}  filePath    File-path to the OpenAPI-spec\n * @returns {boolean}   `true`, if the file is a YAML-file\n * @private\n */\nfunction _isFileTypeYaml(filePath) {\n    const extension = filePath.split('.').pop();\n    return FILE_EXTENSIONS__YAML.includes(extension);\n}\n\n/**\n * Top-level validator. Prepares common values, required for the validation, then calles the validator and prepares\n * the result for the output.\n * @param {ValidationHandler}   validationHandler       The handler which performs the validation. It will receive the\n *                                                      statistics-object as argument and has to return an Array of\n *                                                      errors (or an empty Array, when all examples are valid)\n * @returns {ValidationResponse}\n * @private\n */\nfunction _validate(validationHandler) {\n    const statistics = _initStatistics(),\n        errors = validationHandler(statistics);\n    return createValidationResponse({ errors, statistics });\n}\n\n/**\n * Validates examples by a mapping-file.\n * @param {Object}                  openapiSpec                     OpenAPI-spec\n * @param {Object}                  mapExternalExamples             Mapping-file containing JSON-paths to schemas as\n *                                                                  key and a single file-path or Array of file-paths\n *                                                                  to external examples\n * @param {ValidationStatistics}    statistics                      Validation-statistics\n * @param {boolean}                 [cwdToMappingFile=false]        Change working directory for resolving the example-\n *                                                                  paths (relative to the mapping-file)\n * @param {string}                  [dirPathMapExternalExamples]    The directory-path of the mapping-file\n * @param {Array.<string>} [ignoreFormats]          List of datatype formats that shall be ignored (to prevent\n *                                                  \"unsupported format\" errors). If an Array with only one string is\n *                                                  provided where the formats are separated with `\\n`, the entries\n *                                                  will be expanded to a new array containing all entries.\n * @returns {Array.<ApplicationError>}\n * @private\n */\nfunction _handleExamplesByMapValidation(openapiSpec, mapExternalExamples, statistics,\n    { cwdToMappingFile = false, dirPathMapExternalExamples, ignoreFormats }\n) {\n    return flatMap(Object.entries(mapExternalExamples), ([pathSchema, filePathsExample]) => {\n        let schema = null;\n        try {\n            schema = _extractSchema(_getSchmaPointer(pathSchema, openapiSpec), openapiSpec);\n        } catch (/** @type ErrorJsonPathNotFound */ err) {\n            // If the schema can't be found, don't even attempt to process the examples\n            return ApplicationError.create(err);\n        }\n        return flatMap(\n            flatten([filePathsExample]),\n            filePathExample => {\n                let examples = [];\n                try {\n                    const resolvedFilePathExample = cwdToMappingFile\n                        ? path.join(dirPathMapExternalExamples, filePathExample)\n                        : filePathExample;\n                    const globResolvedFilePathExample = glob.sync(resolvedFilePathExample);\n                    if (globResolvedFilePathExample.length === 0) {\n                        return [ApplicationError.create({\n                            type: ErrorType.jsENOENT,\n                            message: `No such file or directory: '${resolvedFilePathExample}'`,\n                            path: resolvedFilePathExample\n                        })];\n                    }\n                    for (const filePathExample of globResolvedFilePathExample) {\n                        examples.push({\n                            path: path.normalize(filePathExample),\n                            content: JSON.parse(fs.readFileSync(filePathExample, 'utf-8'))\n                        });\n                    }\n                } catch (err) {\n                    return [ApplicationError.create(err)];\n                }\n                return flatMap(examples, example => _validateExample({\n                    createValidator: _initValidatorFactory(openapiSpec, { ignoreFormats }),\n                    schema,\n                    example: example.content,\n                    statistics,\n                    filePathExample: example.path\n                }));\n            }\n        );\n    });\n}\n\n\n/**\n * Merges two `ValidationResponses` together and returns the merged result. The passed `ValidationResponse`s won't be\n * modified.\n * @param {ValidationResponse} response1\n * @param {ValidationResponse} response2\n * @returns {ValidationResponse}\n * @private\n */\nfunction _mergeValidationResponses(response1, response2) {\n    return createValidationResponse({\n        errors: response1.errors.concat(response2.errors),\n        statistics: Object.entries(response1.statistics)\n            .reduce((res, [key, val]) => {\n                if (PROP__SCHEMAS_WITH_EXAMPLES === key) {\n                    [\n                        response1,\n                        response2\n                    ].forEach(response => {\n                        const schemasWithExample = response.statistics[SYM__INTERNAL][PROP__SCHEMAS_WITH_EXAMPLES]\n                            .values();\n                        for (let schema of schemasWithExample) {\n                            res[SYM__INTERNAL][PROP__SCHEMAS_WITH_EXAMPLES].add(schema);\n                        }\n                    });\n                    return res;\n                }\n                res[key] = val + response2.statistics[key];\n                return res;\n            }, _initStatistics())\n    });\n}\n\n/**\n * Extract JSON-pointer(s) for specific path from a OpenAPI-spec\n * @param {String}  path  JSON-path in the OpenAPI-Spec\n * @param {Object}  openapiSpec         OpenAPI-spec\n * @returns {Array.<String>} JSON-pointers to matching elements\n * @private\n */\nfunction _pathToPointer(path, openapiSpec) {\n    return jsonPath({\n        json: openapiSpec,\n        path: path,\n        resultType: ResultType.pointer\n    });\n}\n/**\n * Extract JSON-pointer(s) for specific path from a OpenAPI-spec\n * @param {String}  path  JSON-path in the OpenAPI-Spec\n * @param {Object}  openapiSpec         OpenAPI-spec\n * @returns {String} JSON-pointer to schema or throws error\n * @private\n */\nfunction _getSchmaPointer(pathSchema, openapiSpec) {\n    const schemaPointers = _pathToPointer(pathSchema, openapiSpec);\n    if (schemaPointers.length === 0) {\n        _pathToSchemaNotFoundError(pathSchema);\n    }\n    if (schemaPointers.length > 1) {\n        return [ApplicationError.create({\n            type: ErrorType.jsonPathNotFound,\n            message: `Path to schema cannot identify unique schema: '${pathSchema}'`,\n            path: pathSchema\n        })];\n    }\n    return schemaPointers[0];\n}\n\n/**\n * Validates examples at the given paths in the OpenAPI-spec.\n * @param {Object}          impl            Spec-dependant validator\n * @param {Array.<String>}  pathsExamples   JSON-paths to examples\n * @param {Object}          openapiSpec     OpenAPI-spec\n * @param {Array.<string>} [ignoreFormats]  List of datatype formats that shall be ignored (to prevent\n *                                          \"unsupported format\" errors). If an Array with only one string is\n *                                          provided where the formats are separated with `\\n`, the entries\n *                                          will be expanded to a new array containing all entries.\n * @returns {ValidationResponse}\n * @private\n */\nfunction _validateExamplesPaths({ impl }, pathsExamples, openapiSpec, { ignoreFormats }) {\n    const statistics = _initStatistics(),\n        validationResult = {\n            valid: true,\n            statistics,\n            errors: []\n        },\n        createValidator = _initValidatorFactory(openapiSpec, { ignoreFormats });\n    let validationMap;\n    try {\n        // Create mapping between JSON-schemas and examples\n        validationMap = impl.buildValidationMap(pathsExamples);\n    } catch (error) {\n        // Throw unexpected errors\n        if (!(error instanceof ApplicationError)) {\n            throw error;\n        }\n        // Add known errors and stop\n        validationResult.valid = false;\n        validationResult.errors.push(error);\n        return validationResult;\n    }\n    // Start validation\n    const schemaPointers = Object.keys(validationMap);\n    schemaPointers.forEach(schemaPointer => {\n        _validateSchema({\n            openapiSpec, createValidator, schemaPointer, validationMap, statistics,\n            validationResult\n        });\n    });\n    return validationResult;\n}\n\n/**\n * Validates a single schema.\n * @param {Object}                  openapiSpec         OpenAPI-spec\n * @param {ajv}                     createValidator     Factory, to create JSON-schema validator\n * @param {string}                  schemaPointer          JSON-pointer to schema (for request- or response-property)\n * @param {Object.<String, String>} validationMap Map with schema-pointers as key and example-pointers as value\n * @param {Object}                  statistics          Object to contain statistics metrics\n * @param {Object}                  validationResult    Container, for the validation-results\n * @private\n */\nfunction _validateSchema({\n    openapiSpec, createValidator, schemaPointer, validationMap, statistics,\n    validationResult\n}) {\n    const errors = validationResult.errors;\n    validationMap[schemaPointer].forEach(pathExample => {\n        const example = _getByPointer(pathExample, openapiSpec),\n            // Examples with missing schemas may occur and those are considered valid\n            schema = _extractSchema(schemaPointer, openapiSpec, true);\n        const curErrors = _validateExample({\n            createValidator,\n            schema,\n            example,\n            statistics\n        }).map(error => {\n            error.examplePath = pathExample;\n            return error;\n        });\n        if (!curErrors.length) {\n            return;\n        }\n        validationResult.valid = false;\n        errors.splice(errors.length - 1, 0, ...curErrors);\n    });\n}\n\n/**\n * Creates a container-object for the validation statistics.\n * @returns {ValidationStatistics}\n * @private\n */\nfunction _initStatistics() {\n    const statistics = {\n        [SYM__INTERNAL]: {\n            [PROP__SCHEMAS_WITH_EXAMPLES]: new Set()\n        },\n        examplesTotal: 0,\n        examplesWithoutSchema: 0\n    };\n    Object.defineProperty(statistics, PROP__SCHEMAS_WITH_EXAMPLES, {\n        enumerable: true,\n        get: () => statistics[SYM__INTERNAL][PROP__SCHEMAS_WITH_EXAMPLES].size\n    });\n    return statistics;\n}\n\n/**\n * Extract object by the given JSON-pointer\n * @param {String}      pointer JSON-pointer\n * @param {Object}      json JSON to extract the object(s) from\n * @returns {Object}    Extracted object\n */\nfunction _getByPointer(pointer, json) {\n    try {\n        return jsonPointer.get(json, pointer);\n    } catch (_) {\n        return undefined;\n    }\n}\n\n/**\n * Validates example against the schema. The precondition for this function to work is that the example exists at the\n * given path.\n * `pathExample` and `filePathExample` are exclusively mandatory.\n * itself\n * @param {Function}    createValidator     Factory, to create JSON-schema validator\n * @param {Object}      schema              JSON-schema\n * @param {Object}      example             Example to validate\n * @param {Object}      statistics          Object to contain statistics metrics\n * @param {String}      [filePathExample]   File-path to the example file\n * @returns {Array.<Object>} Array with errors. Empty array, if examples are valid\n * @private\n */\nfunction _validateExample({ createValidator, schema, example, statistics, filePathExample }) {\n    const\n        errors = [];\n    statistics.examplesTotal++;\n    // No schema, no validation (Examples without schema are considered valid)\n    if (!schema) {\n        statistics.examplesWithoutSchema++;\n        return errors;\n    }\n    statistics[SYM__INTERNAL][PROP__SCHEMAS_WITH_EXAMPLES].add(schema);\n    const validate = compileValidate(createValidator(), schema);\n    if (validate(example)) {\n        return errors;\n    }\n    return errors.concat(...validate.errors.map(ApplicationError.create))\n        .map(error => {\n            if (!filePathExample) {\n                return error;\n            }\n            error.exampleFilePath = filePathExample;\n            return error;\n        });\n}\n\n/**\n * Create a new instance of a JSON schema validator\n * @returns {ajv}\n * @private\n */\nfunction _initValidatorFactory(specSchema, { ignoreFormats }) {\n    return getValidatorFactory(specSchema, {\n        schemaId: 'auto',\n        discriminator: true,\n        strict: false,\n        allErrors: true,\n        formats: ignoreFormats && ignoreFormats.reduce((result, entry) => {\n            result[entry] = () => true;\n            return result;\n        }, {})\n    });\n}\n\n/**\n * Extracts the schema in the OpenAPI-spec at the given JSON-pointer.\n * @param   {string}    schemaPointer                          JSON-pointer to the schema\n * @param   {Object}    openapiSpec                         OpenAPI-spec\n * @param   {boolean}   [suppressErrorIfNotFound=false]     Don't throw `ErrorJsonPathNotFound` if the response does not\n *                                                          exist at the given JSON-pointer\n * @returns {Object|Array.<Object>|undefined} Matching schema(s)\n * @throws  {ErrorJsonPathNotFound} Thrown, when there is no schema at the given path and\n *                                  `suppressErrorIfNotFound` is false\n * @private\n */\nfunction _extractSchema(schemaPointer, openapiSpec, suppressErrorIfNotFound = false) {\n    const schema = _getByPointer(schemaPointer, openapiSpec);\n    if (!suppressErrorIfNotFound && !schema) {\n        _pathToSchemaNotFoundError(schemaPointer);\n    }\n    return schema;\n}\n\nfunction _pathToSchemaNotFoundError(schemaPointer) {\n    throw new ErrorJsonPathNotFound(`Path to schema can't be found: '${schemaPointer}'`, {\n        params: {\n            path: schemaPointer\n        }\n    });\n}\n","/**\n * Entry point for logic that only applies to specific versions of the OpenAPI-spec\n */\n\nconst implV2 = require('./v2/index'),\n    implV3 = require('./v3/index');\n\nconst REGEX__OPEN_API = /^3\\./;\n\nmodule.exports = {\n    getImplementation\n};\n\n/**\n * Get the version-specific implementation for the OpenAPI-spec. Currently v2 and v3 are supported\n * @param {Object}  openapiSpec OpenAPI-spec\n * @returns {Object|null}\n */\nfunction getImplementation(openapiSpec) {\n    if (typeof openapiSpec.swagger === 'string') {\n        return implV2;\n    }\n    if (openapiSpec.openapi && openapiSpec.openapi.match(REGEX__OPEN_API)) {\n        return implV3;\n    }\n    return null;\n}\n","/**\n * Wrapper for the JSONSchema-validator\n */\n\nconst { JSONPath: jsonPath } = require('jsonpath-plus'),\n    JsonPointer = require('json-pointer'),\n    Ajv = require('ajv-draft-04'),\n    addFormats = require('ajv-formats');\n\nconst PROP__ID = '$id',\n    JSON_PATH__REFS = '$..\\$ref',\n    ID__SPEC_SCHEMA = 'https://www.npmjs.com/package/openapi-examples-validator/defs.json',\n    ID__RESPONSE_SCHEMA = 'https://www.npmjs.com/package/openapi-examples-validator/schema.json';\n\nmodule.exports = {\n    getValidatorFactory,\n    compileValidate\n};\n\n/**\n * Get a factory-function to create a prepared validator-instance\n * @param {Object}  specSchema  OpenAPI-spec of which potential local references will be extracted\n * @param {Object}  [options]   Options for the validator\n * @returns {function(): (ajv | ajv.Ajv)}\n */\nfunction getValidatorFactory(specSchema, options) {\n    const preparedSpecSchema = _createReferenceSchema(specSchema);\n    return () => {\n        const validator = new Ajv(options);\n        addFormats(validator);\n\n        validator.addSchema(preparedSpecSchema);\n\n        return validator;\n    };\n}\n\n/**\n * Compiles the validator-function.\n * @param {ajv | ajv.Ajv}   validator       Validator-instance\n * @param {Object}          responseSchema  The response-schema, against the examples will be validated\n * @returns {ajv.ValidateFunction}\n */\nfunction compileValidate(validator, responseSchema) {\n    const preparedResponseSchema = _prepareResponseSchema(responseSchema, ID__RESPONSE_SCHEMA);\n    _replaceRefsToPreparedSpecSchema(preparedResponseSchema);\n\n    let result;\n    try {\n        result = validator.compile(preparedResponseSchema);\n    } catch (e) {\n        result = () => {};\n        result.errors = [e];\n    }\n    return result;\n}\n\n/**\n * Prepares the schema, to be used with internal-references\n * @param {Object}  specSchema  The schema to be prebared\n * @param {String}  idSchema    The unique ID for the schema\n * @returns {Object}\n * @private\n */\nfunction _prepareResponseSchema(specSchema, idSchema) {\n    const preparedSchema = Object.assign({}, specSchema);\n    preparedSchema[PROP__ID] = idSchema;\n    return preparedSchema;\n}\n\n/**\n * Replaces all internal references to the schema, with the extracted references, based on the origin OpenAPI-spec\n * @param {Object}  schema  The schema, containing references have to be replaced\n * @private\n */\nfunction _replaceRefsToPreparedSpecSchema(schema) {\n    jsonPath({\n        path: JSON_PATH__REFS,\n        json: schema,\n        callback(value, type, payload) {\n            if (!value.startsWith('#')) { return; }\n            payload.parent[payload.parentProperty] = `${ ID__SPEC_SCHEMA }${ value }`;\n        }\n    });\n}\n\n/**\n * Extracts all references and returns a new schema, containing only those.\n * @param {Object} specSchema   Schema, which references shall be extracted\n * @returns {Object}\n * @private\n */\nfunction _createReferenceSchema(specSchema) {\n    const refSchema = {\n        [PROP__ID]: ID__SPEC_SCHEMA\n    };\n    jsonPath({\n        path: JSON_PATH__REFS,\n        json: specSchema,\n        callback(value) {\n            if (!value.startsWith('#')) { return; }\n            const pointer = value.substring(1),\n                definition = JsonPointer.get(specSchema, pointer);\n            JsonPointer.set(refSchema, pointer, definition);\n        }\n    });\n    return refSchema;\n}\n","module.exports = require(\"lodash.flatmap\");","module.exports = require(\"json-schema-ref-parser\");","module.exports = require(\"lodash.merge\");","module.exports = require(\"ajv-draft-04\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","const { JSONPath: jsonPath } = require('jsonpath-plus'),\n    ResultType = require('../../const/result-type');\n\nmodule.exports = {\n    applyCallbackToAllObjectModels\n};\n\n/**\n * @typedef {{\n *     path: String,\n *     value: Object,\n *     parent: Object,\n *     parentProperty: String,\n *     hasArrExpr: Boolean\n * }} JsonPathMatchData\n */\n\n/**\n * Callback that is applied to a JSONPath-match.\n * @callback JsonPathMatchCallback\n * @param {Object}              value       Value of the matched property\n * @param {String}              resultType  Result-type of the query\n * @param {JsonPathMatchData}   data        Object that contains additional data to the match\n */\n\n/**\n * Function to build a callback that is applied to a JSONPath-match.\n * @callback JsonPathMatchCallbackBuilder\n * @param {string}                 jsPath  Path to the property that matched\n * @return {JsonPathMatchCallback}         Callback that is applied to a JSONPath-match\n */\n\n/**\n * Apply the input rule to all models of type object in the input openApiSpec\n * @param {Object}                 openApiSpec           The to-be-modified schema\n * @param {Array.<String>}         [examplePaths]        The paths to the examples, which's content must not be modified\n * @param {JsonPathMatchCallbackBuilder}  [matchCallbackBuilder]  Function to build a callback\n *                                                                that will be called on each match\n */\nfunction applyCallbackToAllObjectModels(openApiSpec, examplePaths, matchCallbackBuilder) {\n    // Find all matches\n    const paths = new Set();\n    _find(openApiSpec, '$..schema..')\n        .forEach(match => {\n            if (_isPropertiesDefinition(match)) { return; }\n            paths.add(match);\n        });\n    // Exclude examples\n    _excludeExamples(openApiSpec, paths, examplePaths);\n    // Set flag\n    for (const jsPath of paths) {\n        const callback = matchCallbackBuilder(jsPath);\n        _find(openApiSpec, jsPath, ResultType.value, (result, resultType, data) => {\n            if (!_isObjectDefinition(result)) { return; }\n            callback(result, resultType, data);\n        });\n    }\n}\n\n/**\n * Find matching elements in JSON.\n * @param {Object}                  json                JSON to be searched\n * @param {String}                  path                JSON-path to search\n * @param {String}                  [resultType=\"path\"] Result-type of the query\n * @param {JsonPathMatchCallback}   [callback]          Function to be called on a match\n * @returns {any} Result of the query, depending on the `resultType`\n * @private\n */\nfunction _find(json, path, resultType = ResultType.path, callback) {\n    return jsonPath({\n        json,\n        path,\n        flatten: true,\n        resultType,\n        callback\n    });\n}\n\n/**\n * Remove JSON-paths from `paths` that are included in `examplePaths`\n * @param {Object}          openApiSpec     Open-API spec to search in\n * @param {Set.<String>}    paths           Paths where the examples have to be removed from\n * @param {Array.<String>}  examplePaths    JSON-paths of the examples\n * @private\n */\nfunction _excludeExamples(openApiSpec, paths, examplePaths) {\n    examplePaths\n        .forEach(examplePath => {\n            _find(openApiSpec, examplePath)\n                .forEach(exampleMatch => {\n                    for (const jsPath of paths) {\n                        jsPath.startsWith(exampleMatch) && paths.delete(jsPath);\n                    }\n                });\n        });\n}\n\nfunction _isPropertiesDefinition(path) {\n    // Path has to end with `properties`\n    if (!path.match(/\\['properties']$/)) { return; }\n    // Every second consecutive `properties` actually is not a property-definition, but a property itself\n    const consecutiveMatch = path.match(/(?<!\\['properties'])(\\['properties']\\['properties'])+$/);\n    return !consecutiveMatch || consecutiveMatch.length % 2 !== 0;\n}\n\nfunction _isObjectDefinition(entity) {\n    return entity && (entity.type === 'object' || entity.properties);\n}\n","module.exports = require(\"jsonpath-plus\");","module.exports = require(\"lodash.clonedeep\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(497);\n"],"names":["module","exports","require","cloneDeep","setAllPropertiesRequired","setNoAdditionalProperties","getJsonPathsToExamples","buildValidationMap","pathsExamples","reduce","validationMap","pathExample","pathSchema","examplePointer","pathSegs","split","idxExamples","lastIndexOf","splice","length","join","_getSchemaPointerOfExample","Set","add","prepare","openapiSpec","noAdditionalProperties","allPropertiesRequired","openapiSpecCopy","parent","parentProperty","path","pointer","value","applyCallbackToAllObjectModels","openApiSpec","examplePaths","hasOwnProperty","required","Object","keys","properties","hasJsonCombinerParentRegex","RegExp","JSON_SCHEMA_COMBINERS","schema","test","console","warn","some","combiner","additionalProperties","refParser","createValidationResponse","errors","statistics","valid","dereferenceJsonSchema","async","pathToSchema","jsonSchema","currentWorkingDir","process","cwd","chdir","dirname","dereferencedSchema","dereference","ApplicationError","ErrorType","RESPONSES","REQUEST","SINGLE_EXAMPLE","MANY_EXAMPLES","PATH__EXAMPLE","PATH__EXAMPLES","PATH__EXAMPLE__REQUEST_BODY","PATH__EXAMPLES__REQUEST_BODY","ExampleType","exampleTypesOfSchemas","Map","pathSchemaAsArray","exampleType","idxExample","exampleTypeOfSchema","get","pathContextAsArray","slice","create","type","errorAndErrorsMutuallyExclusive","message","params","pathContext","_throwMutuallyExclusiveError","set","merge","ENOENT","jsENOENT","code","jsonPathNotFound","parseError","validation","err","cause","options","constructor","assign","this","flatten","flatMap","jsonPointer","fs","glob","yaml","JSONPath","jsonPath","createError","ResultType","getValidatorFactory","compileValidate","Determiner","SYM__INTERNAL","Symbol","PROP__SCHEMAS_WITH_EXAMPLES","FILE_EXTENSIONS__YAML","ErrorJsonPathNotFound","validateExamples","ignoreFormats","impl","getImplementation","res","pathToExamples","concat","_pathToPointer","_initStatistics","validationResult","createValidator","_initValidatorFactory","error","push","forEach","schemaPointer","example","_getByPointer","_extractSchema","curErrors","_validateExample","map","examplePath","_validateSchema","_validateExamplesPaths","_parseSpec","filePath","isYaml","extension","pop","includes","_isFileTypeYaml","parse","readFileSync","e","name","JSON","_validate","validationHandler","_handleExamplesByMapValidation","mapExternalExamples","cwdToMappingFile","dirPathMapExternalExamples","entries","filePathsExample","_getSchmaPointer","filePathExample","examples","resolvedFilePathExample","globResolvedFilePathExample","sync","normalize","content","json","resultType","schemaPointers","_pathToSchemaNotFoundError","examplesTotal","examplesWithoutSchema","defineProperty","enumerable","size","_","validate","exampleFilePath","specSchema","schemaId","discriminator","strict","allErrors","formats","result","entry","suppressErrorIfNotFound","validateFile","validateExample","filePathSchema","validateExamplesByMap","globMapExternalExamples","matchingFilePathsMapping","filePathsMaps","nonull","responses","filePathMapExternalExamples","mapFilePath","response","response2","response1","key","val","schemasWithExample","values","implV2","implV3","REGEX__OPEN_API","swagger","openapi","match","JsonPointer","Ajv","addFormats","PROP__ID","JSON_PATH__REFS","ID__SPEC_SCHEMA","preparedSpecSchema","refSchema","callback","startsWith","substring","definition","_createReferenceSchema","validator","addSchema","responseSchema","preparedResponseSchema","preparedSchema","_prepareResponseSchema","payload","compile","_find","matchCallbackBuilder","paths","consecutiveMatch","_isPropertiesDefinition","exampleMatch","jsPath","delete","_excludeExamples","data","entity","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}