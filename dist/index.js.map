{"version":3,"file":"index.js","mappings":"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","sources":["webpack://openapi-examples-validator/./node_modules/ajv-oai/lib/constants.js","webpack://openapi-examples-validator/./node_modules/ajv-oai/lib/format-validator.js","webpack://openapi-examples-validator/./src/application-error.js","webpack://openapi-examples-validator/./src/const/result-type.js","webpack://openapi-examples-validator/./src/impl/index.js","webpack://openapi-examples-validator/./src/impl/service/disallow-additional-properties.js","webpack://openapi-examples-validator/./src/impl/v2/index.js","webpack://openapi-examples-validator/./src/impl/v3/index.js","webpack://openapi-examples-validator/./src/index.js","webpack://openapi-examples-validator/./src/utils/index.js","webpack://openapi-examples-validator/./src/validator.js","webpack://openapi-examples-validator/./node_modules/ajv/lib/refs/json-schema-draft-04.json","webpack://openapi-examples-validator/external commonjs \"ajv\"","webpack://openapi-examples-validator/external commonjs \"decimal.js\"","webpack://openapi-examples-validator/external commonjs \"errno\"","webpack://openapi-examples-validator/external commonjs \"glob\"","webpack://openapi-examples-validator/external commonjs \"json-pointer\"","webpack://openapi-examples-validator/external commonjs \"json-schema-ref-parser\"","webpack://openapi-examples-validator/external commonjs \"jsonpath-plus\"","webpack://openapi-examples-validator/external commonjs \"lodash.clonedeep\"","webpack://openapi-examples-validator/external commonjs \"lodash.flatmap\"","webpack://openapi-examples-validator/external commonjs \"lodash.flatten\"","webpack://openapi-examples-validator/external commonjs \"lodash.merge\"","webpack://openapi-examples-validator/external commonjs \"yaml\"","webpack://openapi-examples-validator/external node-commonjs \"fs\"","webpack://openapi-examples-validator/external node-commonjs \"path\"","webpack://openapi-examples-validator/webpack/bootstrap","webpack://openapi-examples-validator/webpack/startup"],"sourcesContent":["const Decimal = require('decimal.js');\n\n// Numeric type ranges\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures\n// https://msdn.microsoft.com/en-us/library/s3f49ktz.aspx\n// https://en.wikipedia.org/wiki/C_data_types\n\nconst RANGES = {\n  byte: {\n    min: new Decimal('-128'),\n    max: new Decimal('127'),\n  },\n\n  int32: {\n    min: new Decimal('-2147483648'),\n    max: new Decimal('2147483647'),\n  },\n\n  int64: {\n    min: new Decimal('-9223372036854775808'),\n    max: new Decimal('9223372036854775807'),\n  },\n\n  float: {\n    min: new Decimal(2).pow(128).negated(),\n    max: new Decimal(2).pow(128),\n  },\n\n  double: {\n    min: new Decimal(2).pow(1024).negated(),\n    max: new Decimal(2).pow(1024),\n  },\n};\n\nmodule.exports = RANGES;\n","const RANGES = require('./constants');\n\n/**\n * OpenAPI 2.0 data types format\n * https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types\n */\n\n/**\n * Check that the data is integer and int32\n * @param {number} data\n * @returns {boolean}\n */\nfunction int32(data) {\n  return (\n    Number.isInteger(+data) &&\n    RANGES.int32.max.greaterThanOrEqualTo(data) &&\n    RANGES.int32.min.lessThanOrEqualTo(data)\n  );\n}\n\n/**\n * Check that the data is integer and int64\n * @param {number} data\n * @returns {boolean}\n */\nfunction int64(data) {\n  return (\n    Number.isInteger(+data) &&\n    RANGES.int64.max.greaterThanOrEqualTo(data) &&\n    RANGES.int64.min.lessThanOrEqualTo(data)\n  );\n}\n\n/**\n * Check that the data is float\n * @param {number} data\n * @returns {boolean}\n */\nfunction float(data) {\n  return (\n    RANGES.float.max.greaterThanOrEqualTo(data) &&\n    RANGES.float.min.lessThanOrEqualTo(data)\n  );\n}\n\n/**\n * Check that the data is double\n * @param {number} data\n * @returns {boolean}\n */\nfunction double(data) {\n  return (\n    RANGES.double.max.greaterThanOrEqualTo(data) &&\n    RANGES.double.min.lessThanOrEqualTo(data)\n  );\n}\n\n/**\n * Check that the data is string and base64 encoded characters.\n * https://github.com/chriso/validator.js/blob/master/src/lib/isBase64.js\n * @param {string} data\n * @returns {boolean}\n */\nfunction byte(data) {\n  /* eslint-disable no-useless-escape */\n  const notBase64 = /[^A-Z0-9+\\/=]/i;\n  /* eslint-enable no-useless-escape */\n\n  const len = data.length;\n  if (!len || len % 4 !== 0 || notBase64.test(data)) {\n    return false;\n  }\n  const firstPaddingChar = data.indexOf('=');\n  return firstPaddingChar === -1 ||\n    firstPaddingChar === len - 1 ||\n    (firstPaddingChar === len - 2 && data[len - 1] === '=');\n}\n\nmodule.exports = {\n  int32,\n  int64,\n  float,\n  double,\n  byte,\n};\n","const\n    merge = require('lodash.merge'),\n    { ENOENT } = require('errno').code;\n\n// TYPEDEFINITIONS\n\n/**\n * @typedef {{}} CustomError\n * @augments Error\n */\n\n/**\n * ApplicationErrorOptions\n * @typedef {{\n *      [dataPath]: string,\n *      [examplePath]: string,\n *      [exampleFilePath]: string,\n *      [keyword]: string,\n *      [message]: string,\n *      [mapFilePath]: string,\n *      [params]: {\n *          [path]: string,\n *          [missingProperty]: string,\n *          [type]: string\n *      },\n *      [schemaPath]: string\n * }} ApplicationErrorOptions\n */\n\n// CONSTANTS\n\nconst ErrorType = {\n    jsENOENT: ENOENT.code,\n    jsonPathNotFound: 'JsonPathNotFound',\n    errorAndErrorsMutuallyExclusive: 'ErrorErrorsMutuallyExclusive',\n    parseError: 'ParseError',\n    validation: 'Validation'\n};\n\n// CLASSES\n\n/**\n * Unified application-error\n */\nclass ApplicationError {\n    /**\n     * Factory-function, which is able to consume validation-errors and JS-errors. If a validation error is passed, all\n     * properties will be adopted.\n     * @param {Error|CustomError}   err     Javascript-, validation- or custom-error, to create the application-error\n     *                                      from\n     * @returns {ApplicationError} Unified application-error instance\n     */\n    static create(err) {\n        const { code, message, path, cause } = err,               // Certain properties of Javascript-errors\n            type = code || err.type || ErrorType.validation,    // If `code` is available then it's a Javascript-error\n            options = { message };\n        if (ErrorType.validation === type || ErrorType.errorAndErrorsMutuallyExclusive === type) {\n            // For certain, created error-types, copy all properties\n            merge(options, err);\n        } else {\n            // Copy certain properties of Javascript-error (but only if available)\n            path && merge(options, { params: { path } });\n            cause && merge(options, cause);\n        }\n        return new ApplicationError(type, options);\n    }\n\n    /**\n     * Constructor\n     * @param {string}                  type        Type of error (see statics)\n     * @param {ApplicationErrorOptions} [options]   Optional properties\n     */\n    constructor(type, options = {}) {\n        Object.assign(this, {\n            type,\n            ...options\n        });\n    }\n}\n\n// PUBLIC API\n\nmodule.exports = {\n    ApplicationError,\n    ErrorType\n};\n","module.exports = {\n    parent: 'parent',\n    parentProperty: 'parentProperty',\n    path: 'path',\n    pointer: 'pointer',\n    value: 'value'\n};\n","/**\n * Entry point for logic that only applies to specific versions of the OpenAPI-spec\n */\n\nconst implV2 = require('./v2/index'),\n    implV3 = require('./v3/index');\n\nconst REGEX__OPEN_API = /^3\\./;\n\nmodule.exports = {\n    getImplementation\n};\n\n/**\n * Get the version-specific implementation for the OpenAPI-spec. Currently v2 and v3 are supported\n * @param {Object}  openapiSpec OpenAPI-spec\n * @returns {Object|null}\n */\nfunction getImplementation(openapiSpec) {\n    if (typeof openapiSpec.swagger === 'string') {\n        return implV2;\n    }\n    if (openapiSpec.openapi && openapiSpec.openapi.match(REGEX__OPEN_API)) {\n        return implV3;\n    }\n    return null;\n}\n","const { JSONPath: jsonPath } = require('jsonpath-plus'),\n    ResultType = require('../../const/result-type');\n\nconst JSON_PATHS__OBJECTS = [\n    '$..application/json.schema',\n    '$..schema..[?(@.properties && (@property === \"schema\" || @property === \"items\" || @.type === \"object\"))]'\n];\n\nconst JSON_SCHEMA_COMBINERS = [\n    'oneOf',\n    'allOf',\n    'anyOf',\n    'not'\n];\n\nmodule.exports = {\n    setNoAdditionalProperties\n};\n\n/**\n * @typedef {{\n *     path: String,\n *     value: Object,\n *     parent: Object,\n *     parentProperty: String,\n *     hasArrExpr: Boolean\n * }} JsonPathMatchData\n */\n\n/**\n * Callback that is applied to a JSONPath-match.\n * @callback JsonPathMatchCallback\n * @param {Object}              value       Value of the matched property\n * @param {String}              resultType  Result-type of the query\n * @param {JsonPathMatchData}   data        Object that contains additional data to the match\n */\n\n/**\n * Sets the flag to indicate that it doesn't allow properties that are not described in the schema\n * @param {Object}                  openApiSpec         The to-be-modified schema\n * @param {Array.<String>}          [examplePaths=[]]   The paths to the examples, which's content must not be modified\n * @param {JsonPathMatchCallback}   [createCallback=_createCallbackObjectTypeForNoAdditionalProperties] Function that\n *                                                      creates a callback to be called on a match\n * @private\n */\nfunction setNoAdditionalProperties(openApiSpec, examplePaths = [],\n    createCallback = _createCallbackObjectTypeForNoAdditionalProperties\n) {\n    // Find all matches\n    const paths = new Set();\n    JSON_PATHS__OBJECTS.forEach(jsPath => {\n        _find(openApiSpec, jsPath)\n            .forEach(match => {\n                // remove all references to paths including any of the JSON schema combiners\n                if (!JSON_SCHEMA_COMBINERS.some((combiner) => match.includes(`['${combiner}']`))) {\n                    paths.add(match);\n                } else {\n                    console.warn('\"additionalProperties\" flag not set '\n                        + `for ${match} because it contains JSON-schema combiner keywords.`);\n                }\n            });\n    });\n    // Exclude examples\n    _excludeExamples(openApiSpec, paths, examplePaths);\n    // Set flag\n    for (const jsPath of paths) {\n        _find(openApiSpec, jsPath, ResultType.value, createCallback(jsPath));\n    }\n}\n\n/**\n * Callback, to set the `additionalProperties` to `false` the object-schemas\n * @type JsonPathMatchCallback\n * @private\n */\nfunction _createCallbackObjectTypeForNoAdditionalProperties(path) {\n    return (value) => {\n        const asString = JSON.stringify(value);\n        // any schema's that use JSON schema combiners should also be excluded\n        if (!JSON_SCHEMA_COMBINERS.some((combiner) => asString.includes(`\"${combiner}\"`))) {\n            value.additionalProperties = false;\n        } else {\n            console.warn('\"additionalProperties\" flag not set '\n                + `for ${path} because it contains JSON-schema combiner keywords.`);\n        }\n    };\n}\n\n/**\n * Find matching elements in JSON.\n * @param {Object}                  json                JSON to be searched\n * @param {String}                  path                JSON-path to search\n * @param {String}                  [resultType=\"path\"] Result-type of the query\n * @param {JsonPathMatchCallback}   [callback]          Function to be called on a match\n * @returns {any} Result of the query, depending on the `resultType`\n * @private\n */\nfunction _find(json, path, resultType = ResultType.path, callback) {\n    return jsonPath({\n        json,\n        path,\n        flatten: true,\n        resultType,\n        callback\n    });\n}\n\n/**\n * Remove JSON-paths from `paths` that are included in `examplePaths`\n * @param {Object}          openApiSpec     Open-API spec to search in\n * @param {Set.<String>}    paths           Paths where the examples have to be removed from\n * @param {Array.<String>}  examplePaths    JSON-paths of the examples\n * @private\n */\nfunction _excludeExamples(openApiSpec, paths, examplePaths) {\n    examplePaths\n        .forEach(examplePath => {\n            _find(openApiSpec, examplePath)\n                .forEach(exampleMatch => {\n                    for (const jsPath of paths) {\n                        jsPath.startsWith(exampleMatch) && paths.delete(jsPath);\n                    }\n                });\n        });\n}\n","/**\n * Contains validation-logic that is specific to V2 of the OpenAPI-spec\n */\n\nconst { JSONPath: jsonPath } = require('jsonpath-plus'),\n    { setNoAdditionalProperties } = require('../service/disallow-additional-properties'),\n    cloneDeep = require('lodash.clonedeep');\n\n// CONSTANTS\n\nconst PATH__EXAMPLES = '$..examples.application/json',\n    PROP__SCHEMA = 'schema',\n    PROP__EXAMPLES = 'examples';\n\nmodule.exports = {\n    buildValidationMap,\n    escapeExampleName,\n    getJsonPathsToExamples,\n    prepare,\n    unescapeExampleNames\n};\n\n// IMPLEMENTATION DETAILS\n\n/**\n * Get the JSONPaths to the examples\n * @returns {Array.<String>}    JSONPaths to the examples\n */\nfunction getJsonPathsToExamples() { return [PATH__EXAMPLES]; }\n\n\n/**\n * Builds a map with the path to the repsonse-schema as key and the paths to the examples, as value. The path of the\n * schema is derived from the path to the example and doesn't necessarily mean that the schema actually exists.\n * @param {Array.<String>}  pathsExamples   Paths to the examples\n * @returns {Object.<String, String>} Map with schema-path as key and example-paths as value\n * @private\n */\nfunction buildValidationMap(pathsExamples) {\n    return pathsExamples.reduce((validationMap, pathExample) => {\n        const pathSchema = _getSchemaPathOfExample(pathExample);\n        validationMap[pathSchema] = (validationMap[pathSchema] || new Set())\n            .add(pathExample);\n        return validationMap;\n    }, {});\n}\n\n/**\n * Pre-processes the OpenAPI-spec, for further use.\n * The passed spec won't be modified. If a modification happens, a modified copy will be returned.\n * @param {Object}  openapiSpec                     The OpenAPI-spec as JSON-schema\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not defined in the schema\n * @return {Object} The prepared OpenAPI-spec\n */\nfunction prepare(openapiSpec, { noAdditionalProperties } = {}) {\n    const openapiSpecCopy = cloneDeep(openapiSpec);\n    noAdditionalProperties && setNoAdditionalProperties(openapiSpecCopy, getJsonPathsToExamples());\n    return openapiSpecCopy;\n}\n\n/**\n * Escapes the name of the example.\n * @param {string} rawPath  Unescaped path\n * @returns {string} Escaped path\n * @private\n */\nfunction escapeExampleName(rawPath) {\n    // No escaping necessary in v2, as there are no named-examples\n    return rawPath;\n}\n\n/**\n * Escaped example-names reflect in the result (where they shouldn't). This function reverts it.\n * @param {string} rawPath  Escaped path\n * @returns {string} Unescaped path\n */\nfunction unescapeExampleNames(rawPath) {\n    // No unescaping necessary in v2, as there are no named-examples\n    return rawPath;\n}\n\n/**\n * Gets a JSON-path to the corresponding response-schema, based on a JSON-path to an example.\n * @param {String}  pathExample JSON-path to example\n * @returns {String} JSON-path to the corresponding response-schema\n * @private\n */\nfunction _getSchemaPathOfExample(pathExample) {\n    const pathSegs = jsonPath.toPathArray(pathExample).slice(),\n        idxExamples = pathSegs.lastIndexOf(PROP__EXAMPLES);\n    pathSegs.splice(idxExamples, pathSegs.length - idxExamples, PROP__SCHEMA);\n    return jsonPath.toPathString(pathSegs);\n}\n","/**\n * Contains validation-logic that is specific to V3 of the OpenAPI-spec\n */\n\nconst { JSONPath: jsonPath } = require('jsonpath-plus'),\n    cloneDeep = require('lodash.clonedeep'),\n    { ApplicationError, ErrorType } = require('../../application-error'),\n    { setNoAdditionalProperties } = require('../service/disallow-additional-properties');\n\n// CONSTANTS\n\nconst PATH__EXAMPLE = '$..responses..content.application/json.example',\n    PATH__EXAMPLES = '$..responses..content.application/json.examples.*.value',\n    PATH__EXAMPLE__PARAMETER = '$..parameters..example',\n    PATH__EXAMPLES__PARAMETER = '$..parameters..examples.*.value',\n    PATH__EXAMPLE__REQUEST_BODY = '$..requestBody.content.application/json.example',\n    PATH__EXAMPLES__REQUEST_BODY = '$..requestBody.content.application/json.examples.*.value',\n    PROP__SCHEMA = 'schema',\n    PROP__EXAMPLE = 'example',\n    PROP__EXAMPLES = 'examples';\n\nconst ExampleType = {\n    single: 'single',\n    multi: 'multi'\n};\n\n// PUBLIC API\n\nmodule.exports = {\n    buildValidationMap,\n    escapeExampleName,\n    getJsonPathsToExamples,\n    prepare,\n    unescapeExampleNames\n};\n\n// IMPLEMENTATION DETAILS\n\n/**\n * Get the JSONPaths to the examples\n * @returns {Array.<String>}    JSONPaths to the examples\n */\nfunction getJsonPathsToExamples() {\n    return [\n        PATH__EXAMPLE,\n        PATH__EXAMPLES,\n        PATH__EXAMPLE__PARAMETER,\n        PATH__EXAMPLES__PARAMETER,\n        PATH__EXAMPLE__REQUEST_BODY,\n        PATH__EXAMPLES__REQUEST_BODY\n    ];\n}\n\n/**\n * Builds a map with the path to the repsonse-schema as key and the paths to the examples, as value. The path of the\n * schema is derived from the path to the example and doesn't necessarily mean that the schema actually exists.\n * @param {Array.<String>}  pathsExamples   Paths to the examples\n * @returns {Object.<String, String>} Map with schema-path as key and example-paths as value\n * @private\n */\nfunction buildValidationMap(pathsExamples) {\n    const exampleTypesOfSchemas = new Map();\n    return pathsExamples.reduce((validationMap, pathExample) => {\n        const { pathSchemaAsArray, exampleType } = _getSchemaPathOfExample(pathExample),\n            pathSchema = jsonPath.toPathString(pathSchemaAsArray),\n            exampleTypeOfSchema = exampleTypesOfSchemas.get(pathSchema);\n        if (exampleTypeOfSchema) {\n            exampleTypeOfSchema !== exampleType && _throwMutuallyExclusiveError(pathSchemaAsArray);\n        }\n        exampleTypesOfSchemas.set(pathSchema, exampleType);\n        validationMap[pathSchema] = (validationMap[pathSchema] || new Set())\n            .add(pathExample);\n        return validationMap;\n    }, {});\n}\n\n/**\n * Pre-processes the OpenAPI-spec, for further use.\n * The passed spec won't be modified. If a modification happens, a modified copy will be returned.\n * @param {Object}  openapiSpec     The OpenAPI-spec as JSON-schema\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not defined in the schema\n * @return {Object} The prepared OpenAPI-spec\n */\nfunction prepare(openapiSpec, { noAdditionalProperties } = {}) {\n    const openapiSpecCopy = cloneDeep(openapiSpec);\n    noAdditionalProperties && setNoAdditionalProperties(openapiSpecCopy, getJsonPathsToExamples());\n    return openapiSpecCopy;\n}\n\n/**\n * Escapes the name of the example. In order to do that, a backtick has to be added to the beginning of the key.\n * @param {string} rawPath  Unescaped path\n * @returns {string} Escaped path\n * @private\n */\nfunction escapeExampleName(rawPath) {\n    return rawPath.replace(/\\['examples'\\]\\['(.*)\\]\\['value'\\]$/, \"['examples']['`$1]['value']\");\n}\n\n/**\n * Escaped example-names reflect in the result (where they shouldn't). This function reverts it.\n * @param {string} rawPath  Escaped path\n * @returns {string} Unescaped path\n */\nfunction unescapeExampleNames(rawPath) {\n    return rawPath && rawPath.replace(/\\/examples\\/`(.*)\\/value$/, '/examples/$1/value');\n}\n\n/**\n * Gets a JSON-path to the corresponding response-schema, based on a JSON-path to an example.\n *\n * It is assumed that the JSON-path to the example is valid and existing.\n * @param {String}  pathExample JSON-path to example\n * @returns {{\n *     exampleType: ExampleType,\n *     pathSchema: String\n * }} JSON-path to the corresponding response-schema\n * @private\n */\nfunction _getSchemaPathOfExample(pathExample) {\n    const pathSegs = jsonPath.toPathArray(pathExample).slice(),\n        idxExample = pathSegs.lastIndexOf(PROP__EXAMPLE),\n        /** @type ExampleType */\n        exampleType = idxExample > -1\n            ? ExampleType.single\n            : ExampleType.multi,\n        idxExamples = exampleType === ExampleType.single\n            ? idxExample\n            : pathSegs.lastIndexOf(PROP__EXAMPLES);\n    pathSegs.splice(idxExamples, pathSegs.length - idxExamples, PROP__SCHEMA);\n    return {\n        exampleType,\n        pathSchemaAsArray: pathSegs\n    };\n}\n\n/**\n * Checks if only `example` or `examples` is set for the schema, as they are mutually exclusive by OpenAPI-spec.\n * @param {Array.<String>}  pathSchemaAsArray   JSON-path to the Schema, as JSON-path-array\n * @throws ApplicationError if both are set\n * @private\n */\nfunction _throwMutuallyExclusiveError(pathSchemaAsArray) {\n    const pathContextAsArray = pathSchemaAsArray.slice(0, pathSchemaAsArray.length - 1);    // Strip `schema` away\n    throw ApplicationError.create({\n        type: ErrorType.errorAndErrorsMutuallyExclusive,\n        message: 'Properties \"error\" and \"errors\" are mutually exclusive',\n        params: {\n            pathContext: jsonPath.toPointer(pathContextAsArray)\n        }\n    });\n}\n","/**\n * Entry-point for the validator-API\n */\n\nconst\n    merge = require('lodash.merge'),\n    flatten = require('lodash.flatten'),\n    flatMap = require('lodash.flatmap'),\n    fs = require('fs'),\n    path = require('path'),\n    glob = require('glob'),\n    yaml = require('yaml'),\n    { JSONPath: jsonPath } = require('jsonpath-plus'),\n    refParser = require('json-schema-ref-parser'),\n    { createError } = require('errno').custom,\n    ResultType = require('./const/result-type'),\n    { getValidatorFactory, compileValidate } = require('./validator'),\n    Determiner = require('./impl'),\n    { ApplicationError, ErrorType } = require('./application-error'),\n    { createValidationResponse, dereferenceJsonSchema } = require('./utils');\n\n// CONSTANTS\n\nconst SYM__INTERNAL = Symbol('internal'),\n    PROP__SCHEMAS_WITH_EXAMPLES = 'schemasWithExamples',\n    FILE_EXTENSIONS__YAML = [\n        'yaml',\n        'yml'\n    ];\n\n// STATICS\n\n/**\n * ErrorJsonPathNotFound\n * @typedef {{\n *      cause: {\n *          [params]: {\n *              [path]: string\n *          }\n *      }\n * }} ErrorJsonPathNotFound\n * @augments CustomError\n */\n\n/**\n * @constructor\n * @augments CustomError\n * @returns {ErrorJsonPathNotFound}\n */\nconst ErrorJsonPathNotFound = createError(ErrorType.jsonPathNotFound);\n\n// PUBLIC API\n\nmodule.exports = {\n    'default': validateExamples,\n    validateFile,\n    validateExample,\n    validateExamplesByMap\n};\n\n// IMPLEMENTATION DETAILS\n\n// Type definitions\n\n/**\n * ValidationStatistics\n * @typedef {{\n *      schemasWithExamples: number,\n *      examplesTotal: number,\n *      examplesWithoutSchema: number,\n *      [matchingFilePathsMapping]: number\n * }} ValidationStatistics\n */\n\n/**\n * ValidationResponse\n * @typedef {{\n *      valid: boolean,\n *      statistics: ValidationStatistics,\n *      errors: Array.<ApplicationError>\n * }} ValidationResponse\n */\n\n/**\n * @callback ValidationHandler\n * @param {ValidationStatistics}    statistics\n * @returns {Array.<ApplicationError>}\n */\n\n// Public\n\n/**\n * Validates OpenAPI-spec with embedded examples.\n * @param {Object}  openapiSpec OpenAPI-spec\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not defined in the schema\n * @param {Array.<string>} [ignoreFormats]          List of datatype formats that shall be ignored (to prevent\n *                                                  \"unsupported format\" errors). If an Array with only one string is\n *                                                  provided where the formats are separated with `\\n`, the entries\n *                                                  will be expanded to a new array containing all entries.\n * @returns {ValidationResponse}\n */\nasync function validateExamples(openapiSpec, { noAdditionalProperties, ignoreFormats } = {}) {\n    const impl = Determiner.getImplementation(openapiSpec);\n    openapiSpec = await refParser.dereference(openapiSpec);\n    openapiSpec = impl.prepare(openapiSpec, { noAdditionalProperties });\n    let pathsExamples = impl.getJsonPathsToExamples()\n        .reduce((res, pathToExamples) => {\n            return res.concat(_extractExamplePaths(openapiSpec, pathToExamples));\n        }, [])\n        .map(impl.escapeExampleName);\n    return _validateExamplesPaths({ impl }, pathsExamples, openapiSpec, { ignoreFormats });\n}\n\n/**\n * Validates OpenAPI-spec with embedded examples.\n * @param {string}  filePath                        File-path to the OpenAPI-spec\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not defined in the schema\n * @param {Array.<string>} [ignoreFormats]          List of datatype formats that shall be ignored (to prevent\n *                                                  \"unsupported format\" errors). If an Array with only one string is\n *                                                  provided where the formats are separated with `\\n`, the entries\n *                                                  will be expanded to a new array containing all entries.\n * @returns {ValidationResponse}\n */\nasync function validateFile(filePath, { noAdditionalProperties, ignoreFormats } = {}) {\n    let openapiSpec = null;\n    try {\n        openapiSpec = await _parseSpec(filePath);\n    } catch (err) {\n        return createValidationResponse({ errors: [ApplicationError.create(err)] });\n    }\n    return validateExamples(openapiSpec, { noAdditionalProperties, ignoreFormats });\n}\n\n/**\n * Validates examples by mapping-files.\n * @param {string}  filePathSchema              File-path to the OpenAPI-spec\n * @param {string}  globMapExternalExamples     File-path (globs are supported) to the mapping-file containing JSON-\n *                                              paths to schemas as key and a single file-path or Array of file-paths\n *                                              to external examples\n * @param {boolean} [cwdToMappingFile=false]    Change working directory for resolving the example-paths (relative to\n *                                              the mapping-file)\n * @param {boolean} [noAdditionalProperties=false] Don't allow properties that are not defined in the schema\n * @param {Array.<string>} [ignoreFormats]      List of datatype formats that shall be ignored (to prevent\n *                                              \"unsupported format\" errors). If an Array with only one string is\n *                                              provided where the formats are separated with `\\n`, the entries\n *                                              will be expanded to a new array containing all entries.\n * @returns {ValidationResponse}\n */\nasync function validateExamplesByMap(filePathSchema, globMapExternalExamples,\n    { cwdToMappingFile, noAdditionalProperties, ignoreFormats } = {}\n) {\n    let matchingFilePathsMapping = 0;\n    const filePathsMaps = glob.sync(\n        globMapExternalExamples,\n        // Using `nonull`-option to explicitly create an app-error if there's no match for `globMapExternalExamples`\n        { nonull: true }\n    );\n    let responses = [];\n    // for..of here, to support sequential execution of async calls. This is required, since dereferencing the\n    // `openapiSpec` is not concurrency-safe\n    for (let filePathMapExternalExamples of filePathsMaps) {\n        let mapExternalExamples = null,\n            openapiSpec = null;\n        try {\n            mapExternalExamples = JSON.parse(fs.readFileSync(filePathMapExternalExamples, 'utf-8'));\n            openapiSpec = await _parseSpec(filePathSchema);\n            openapiSpec = Determiner.getImplementation(openapiSpec)\n                .prepare(openapiSpec, { noAdditionalProperties });\n        } catch (err) {\n            responses.push(createValidationResponse({ errors: [ApplicationError.create(err)] }));\n            continue;\n        }\n        // Not using `glob`'s response-length, becuse it is `1` if there's no match for `globMapExternalExamples`.\n        // Instead, increment on every match\n        matchingFilePathsMapping++;\n        responses.push(\n            _validate(\n                statistics => {\n                    return _handleExamplesByMapValidation(\n                        openapiSpec, mapExternalExamples, statistics, {\n                            cwdToMappingFile,\n                            dirPathMapExternalExamples: path.dirname(filePathMapExternalExamples),\n                            ignoreFormats\n                        }\n                    ).map(\n                        (/** @type ApplicationError */ error) => Object.assign(error, {\n                            mapFilePath: filePathMapExternalExamples\n                        })\n                    );\n                }\n            )\n        );\n    }\n    return merge(\n        responses.reduce((res, response) => {\n            if (!res) {\n                return response;\n            }\n            return _mergeValidationResponses(res, response);\n        }, null),\n        { statistics: { matchingFilePathsMapping } }\n    );\n}\n\n/**\n * Validates a single external example.\n * @param {String}  filePathSchema                  File-path to the OpenAPI-spec\n * @param {String}  pathSchema                      JSON-path to the schema\n * @param {String}  filePathExample                 File-path to the external example-file\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not described in the schema\n * @param {Array.<string>} [ignoreFormats]          List of datatype formats that shall be ignored (to prevent\n *                                                  \"unsupported format\" errors). If an Array with only one string is\n *                                                  provided where the formats are separated with `\\n`, the entries\n *                                                  will be expanded to a new array containing all entries.\n * @returns {ValidationResponse}\n */\nasync function validateExample(filePathSchema, pathSchema, filePathExample, {\n    noAdditionalProperties,\n    ignoreFormats\n} = {}) {\n    let example = null,\n        schema = null,\n        openapiSpec = null;\n    try {\n        example = JSON.parse(fs.readFileSync(filePathExample, 'utf-8'));\n        openapiSpec = await _parseSpec(filePathSchema);\n        openapiSpec = Determiner.getImplementation(openapiSpec)\n            .prepare(openapiSpec, { noAdditionalProperties });\n        schema = _extractSchema(pathSchema, openapiSpec);\n    } catch (err) {\n        return createValidationResponse({ errors: [ApplicationError.create(err)] });\n    }\n    return _validate(\n        statistics => _validateExample({\n            createValidator: _initValidatorFactory(openapiSpec, { ignoreFormats }),\n            schema,\n            example,\n            statistics,\n            filePathExample\n        })\n    );\n}\n\n// Private\n\n/**\n * Parses the OpenAPI-spec (supports JSON and YAML)\n * @param {String}  filePath    File-path to the OpenAPI-spec\n * @returns {object}    Parsed OpenAPI-spec\n * @private\n */\nasync function _parseSpec(filePath) {\n    const isYaml = _isFileTypeYaml(filePath);\n    let jsonSchema;\n\n    if (isYaml) {\n        try {\n            jsonSchema = yaml.parse(fs.readFileSync(filePath, 'utf-8'));\n        } catch (e) {\n            const { name, message } = e;\n            throw new ApplicationError(ErrorType.parseError, { message: `${name}: ${message}` });\n        }\n    } else {\n        jsonSchema = JSON.parse(fs.readFileSync(filePath, 'utf-8'));\n    }\n\n    return await dereferenceJsonSchema(filePath, jsonSchema);\n}\n\n/**\n * Determines whether the filePath is pointing to a YAML-file\n * @param {String}  filePath    File-path to the OpenAPI-spec\n * @returns {boolean}   `true`, if the file is a YAML-file\n * @private\n */\nfunction _isFileTypeYaml(filePath) {\n    const extension = filePath.split('.').pop();\n    return FILE_EXTENSIONS__YAML.includes(extension);\n}\n\n/**\n * Top-level validator. Prepares common values, required for the validation, then calles the validator and prepares\n * the result for the output.\n * @param {ValidationHandler}   validationHandler       The handler which performs the validation. It will receive the\n *                                                      statistics-object as argument and has to return an Array of\n *                                                      errors (or an empty Array, when all examples are valid)\n * @returns {ValidationResponse}\n * @private\n */\nfunction _validate(validationHandler) {\n    const statistics = _initStatistics(),\n        errors = validationHandler(statistics);\n    return createValidationResponse({ errors, statistics });\n}\n\n/**\n * Validates examples by a mapping-file.\n * @param {Object}                  openapiSpec                     OpenAPI-spec\n * @param {Object}                  mapExternalExamples             Mapping-file containing JSON-paths to schemas as\n *                                                                  key and a single file-path or Array of file-paths\n *                                                                  to external examples\n * @param {ValidationStatistics}    statistics                      Validation-statistics\n * @param {boolean}                 [cwdToMappingFile=false]        Change working directory for resolving the example-\n *                                                                  paths (relative to the mapping-file)\n * @param {string}                  [dirPathMapExternalExamples]    The directory-path of the mapping-file\n * @param {Array.<string>} [ignoreFormats]          List of datatype formats that shall be ignored (to prevent\n *                                                  \"unsupported format\" errors). If an Array with only one string is\n *                                                  provided where the formats are separated with `\\n`, the entries\n *                                                  will be expanded to a new array containing all entries.\n * @returns {Array.<ApplicationError>}\n * @private\n */\nfunction _handleExamplesByMapValidation(openapiSpec, mapExternalExamples, statistics,\n    { cwdToMappingFile = false, dirPathMapExternalExamples, ignoreFormats }\n) {\n    return flatMap(Object.entries(mapExternalExamples), ([pathSchema, filePathsExample]) => {\n        let schema = null;\n        try {\n            schema = _extractSchema(pathSchema, openapiSpec);\n        } catch (/** @type ErrorJsonPathNotFound */ err) {\n            // If the schema can't be found, don't even attempt to process the examples\n            return ApplicationError.create(err);\n        }\n        return flatMap(\n            flatten([filePathsExample]),\n            filePathExample => {\n                let example = null;\n                try {\n                    const resolvedFilePathExample = cwdToMappingFile\n                        ? path.join(dirPathMapExternalExamples, filePathExample)\n                        : filePathExample;\n                    example = JSON.parse(fs.readFileSync(resolvedFilePathExample, 'utf-8'));\n                } catch (err) {\n                    return [ApplicationError.create(err)];\n                }\n                return _validateExample({\n                    createValidator: _initValidatorFactory(openapiSpec, { ignoreFormats }),\n                    schema,\n                    example,\n                    statistics,\n                    filePathExample\n                });\n            }\n        );\n    });\n}\n\n/**\n * Merges two `ValidationResponses` together and returns the merged result. The passed `ValidationResponse`s won't be\n * modified.\n * @param {ValidationResponse} response1\n * @param {ValidationResponse} response2\n * @returns {ValidationResponse}\n * @private\n */\nfunction _mergeValidationResponses(response1, response2) {\n    return createValidationResponse({\n        errors: response1.errors.concat(response2.errors),\n        statistics: Object.entries(response1.statistics)\n            .reduce((res, [key, val]) => {\n                if (PROP__SCHEMAS_WITH_EXAMPLES === key) {\n                    [\n                        response1,\n                        response2\n                    ].forEach(response => {\n                        const schemasWithExample = response.statistics[SYM__INTERNAL][PROP__SCHEMAS_WITH_EXAMPLES]\n                            .values();\n                        for (let schema of schemasWithExample) {\n                            res[SYM__INTERNAL][PROP__SCHEMAS_WITH_EXAMPLES].add(schema);\n                        }\n                    });\n                    return res;\n                }\n                res[key] = val + response2.statistics[key];\n                return res;\n            }, _initStatistics())\n    });\n}\n\n/**\n * Extracts all JSON-paths to examples from a OpenAPI-spec\n * @param {Object}  openapiSpec         OpenAPI-spec\n * @param {String}  jsonPathToExamples  JSON-path to the examples, in the OpenAPI-Spec\n * @returns {Array.<String>} JSON-paths to examples\n * @private\n */\nfunction _extractExamplePaths(openapiSpec, jsonPathToExamples) {\n    return jsonPath({\n        json: openapiSpec,\n        path: jsonPathToExamples,\n        resultType: ResultType.path\n    });\n}\n\n/**\n * Validates examples at the given paths in the OpenAPI-spec.\n * @param {Object}          impl            Spec-dependant validator\n * @param {Array.<String>}  pathsExamples   JSON-paths to examples\n * @param {Object}          openapiSpec     OpenAPI-spec\n * @param {Array.<string>} [ignoreFormats]  List of datatype formats that shall be ignored (to prevent\n *                                          \"unsupported format\" errors). If an Array with only one string is\n *                                          provided where the formats are separated with `\\n`, the entries\n *                                          will be expanded to a new array containing all entries.\n * @returns {ValidationResponse}\n * @private\n */\nfunction _validateExamplesPaths({ impl }, pathsExamples, openapiSpec, { ignoreFormats }) {\n    const statistics = _initStatistics(),\n        validationResult = {\n            valid: true,\n            statistics,\n            errors: []\n        },\n        createValidator = _initValidatorFactory(openapiSpec, { ignoreFormats });\n    let validationMap;\n    try {\n        // Create mapping between JSON-schemas and examples\n        validationMap = impl.buildValidationMap(pathsExamples);\n    } catch (error) {\n        // Throw unexpected errors\n        if (!(error instanceof ApplicationError)) {\n            throw error;\n        }\n        // Add known errors and stop\n        validationResult.valid = false;\n        validationResult.errors.push(error);\n        return validationResult;\n    }\n    // Start validation\n    const schemaPaths = Object.keys(validationMap);\n    schemaPaths.forEach(pathSchema => {\n        _validateSchema({\n            openapiSpec, createValidator, pathSchema, validationMap, statistics,\n            validationResult\n        });\n    });\n    // Revert escaped example names from the results\n    validationResult.errors.forEach((example) => {\n        example.examplePath = impl.unescapeExampleNames(example.examplePath);\n    });\n    return validationResult;\n}\n\n/**\n * Validates a single schema.\n * @param {Object}                  openapiSpec         OpenAPI-spec\n * @param {ajv}                     createValidator     Factory, to create JSON-schema validator\n * @param {string}                  pathSchema          JSON-path to schema (for request- or response-property)\n * @param {Object.<String, String>} validationMap Map with schema-path as key and example-paths as value\n * @param {Object}                  statistics          Object to contain statistics metrics\n * @param {Object}                  validationResult    Container, for the validation-results\n * @private\n */\nfunction _validateSchema({\n    openapiSpec, createValidator, pathSchema, validationMap, statistics,\n    validationResult\n}) {\n    const errors = validationResult.errors;\n    validationMap[pathSchema].forEach(pathExample => {\n        const example = _getObjectByPath(pathExample, openapiSpec),\n            // Examples with missing schemas may occur and those are considered valid\n            schema = _extractSchema(pathSchema, openapiSpec, true),\n            curErrors = _validateExample({\n                createValidator,\n                schema,\n                example,\n                statistics\n            }).map(error => {\n                error.examplePath = jsonPath.toPointer(jsonPath.toPathArray(pathExample));\n                return error;\n            });\n        if (!curErrors.length) {\n            return;\n        }\n        validationResult.valid = false;\n        errors.splice(errors.length - 1, 0, ...curErrors);\n    });\n}\n\n/**\n * Creates a container-object for the validation statistics.\n * @returns {ValidationStatistics}\n * @private\n */\nfunction _initStatistics() {\n    const statistics = {\n        [SYM__INTERNAL]: {\n            [PROP__SCHEMAS_WITH_EXAMPLES]: new Set()\n        },\n        examplesTotal: 0,\n        examplesWithoutSchema: 0\n    };\n    Object.defineProperty(statistics, PROP__SCHEMAS_WITH_EXAMPLES, {\n        enumerable: true,\n        get: () => statistics[SYM__INTERNAL][PROP__SCHEMAS_WITH_EXAMPLES].size\n    });\n    return statistics;\n}\n\n/**\n * Extract object(s) by the given JSON-path\n * @param {String}  path    JSON-path\n * @param {Object}  json    JSON to extract the object(s) from\n * @returns {Object|Array.<Object>|undefined} All matching objects. Single object if there is only one match\n * @private\n */\nfunction _getObjectByPath(path, json) {\n    return jsonPath({\n        json,\n        path,\n        flatten: true,\n        wrap: false,\n        resultType: ResultType.value\n    });\n}\n\n/**\n * Validates example against the schema. The precondition for this function to work is that the example exists at the\n * given path.\n * `pathExample` and `filePathExample` are exclusively mandatory.\n * itself\n * @param {Function}    createValidator     Factory, to create JSON-schema validator\n * @param {Object}      schema              JSON-schema\n * @param {Object}      example             Example to validate\n * @param {Object}      statistics          Object to contain statistics metrics\n * @param {String}      [filePathExample]   File-path to the example file\n * @returns {Array.<Object>} Array with errors. Empty array, if examples are valid\n * @private\n */\nfunction _validateExample({ createValidator, schema, example, statistics, filePathExample }) {\n    const\n        errors = [];\n    statistics.examplesTotal++;\n    // No schema, no validation (Examples without schema are considered valid)\n    if (!schema) {\n        statistics.examplesWithoutSchema++;\n        return errors;\n    }\n    statistics[SYM__INTERNAL][PROP__SCHEMAS_WITH_EXAMPLES].add(schema);\n    const validate = compileValidate(createValidator(), schema);\n    if (validate(example)) {\n        return errors;\n    }\n    return errors.concat(...validate.errors.map(ApplicationError.create))\n        .map(error => {\n            if (!filePathExample) {\n                return error;\n            }\n            error.exampleFilePath = filePathExample;\n            return error;\n        });\n}\n\n/**\n * Create a new instance of a JSON schema validator\n * @returns {ajv}\n * @private\n */\nfunction _initValidatorFactory(specSchema, { ignoreFormats }) {\n    return getValidatorFactory(specSchema, {\n        schemaId: 'auto',\n        allErrors: true,\n        nullable: true,\n        formats: ignoreFormats && ignoreFormats.reduce((result, entry) => {\n            result[entry] = () => true;\n            return result;\n        }, {})\n    });\n}\n\n/**\n * Extracts the schema in the OpenAPI-spec at the given JSON-path.\n * @param   {string}    pathSchema                          JSON-path to the schema\n * @param   {Object}    openapiSpec                         OpenAPI-spec\n * @param   {boolean}   [suppressErrorIfNotFound=false]     Don't throw `ErrorJsonPathNotFound` if the repsonse does not\n *                                                          exist at the given JSON-path\n * @returns {Object|Array.<Object>|undefined} Matching schema(s)\n * @throws  {ErrorJsonPathNotFound} Thrown, when there is no schema at the given path and\n *                                  `suppressErrorIfNotFound` is false\n * @private\n */\nfunction _extractSchema(pathSchema, openapiSpec, suppressErrorIfNotFound = false) {\n    const schema = _getObjectByPath(pathSchema, openapiSpec);\n    if (!suppressErrorIfNotFound && !schema) {\n        throw new ErrorJsonPathNotFound(`Path to schema can't be found: '${pathSchema}'`, {\n            params: {\n                path: pathSchema\n            }\n        });\n    }\n    return schema;\n}\n","const path = require('path'),\n    refParser = require('json-schema-ref-parser');\n\nmodule.exports = {\n    createValidationResponse,\n    dereferenceJsonSchema\n};\n\n/**\n * Creates a unified response for the validation-result\n * @param {Array.<ApplicationError>}    errors\n * @param {ValidationStatistics}        statistics\n * @returns {ValidationResponse}\n * @private\n */\nfunction createValidationResponse({ errors, statistics = {} }) {\n    return {\n        valid: !errors.length,\n        statistics,\n        errors\n    };\n}\n\n/**\n * Includes all referenced, external schemas (by the keyword `$ref`) into the schema\n *\n * CAUTION: This function is not concurrency-safe !!\n * This function changes the working dir and sets it back. This may become an concurrency issue when there are\n * other tasks running that rely on the working dir while this function waits for the asynchronous task of\n * dereferencing to complete.\n *\n * @param {String} pathToSchema     File-path to the schema\n * @param {Object} jsonSchema       Schema with potential externally referenced schemas\n * @returns {Promise<Object>}       Dereferenced schema\n */\nasync function dereferenceJsonSchema(pathToSchema, jsonSchema) {\n    const currentWorkingDir = process.cwd();\n    // Change the working dir to the schema-path, to make sure that relative paths can be resolved\n    process.chdir(path.dirname(pathToSchema));\n    const dereferencedSchema = await refParser.dereference(jsonSchema);\n    // Restore original working dir\n    process.chdir(currentWorkingDir);\n    return dereferencedSchema;\n}\n","/**\n * Wrapper for the JSONSchema-validator\n */\n\nconst { JSONPath: jsonPath } = require('jsonpath-plus'),\n    JsonPointer = require('json-pointer'),\n    Ajv = require('ajv'),\n    FormatValidator = require('ajv-oai/lib/format-validator'),\n    draft4MetaSchema = require('ajv/lib/refs/json-schema-draft-04.json');\n\nconst PROP__ID = '$id',\n    JSON_PATH__REFS = '$..\\$ref',\n    ID__SPEC_SCHEMA = 'https://www.npmjs.com/package/openapi-examples-validator/defs.json',\n    ID__RESPONSE_SCHEMA = 'https://www.npmjs.com/package/openapi-examples-validator/schema.json';\n\nmodule.exports = {\n    getValidatorFactory,\n    compileValidate\n};\n\n/**\n * Get a factory-function to create a prepared validator-instance\n * @param {Object}  specSchema  OpenAPI-spec of which potential local references will be extracted\n * @param {Object}  [options]   Options for the validator\n * @returns {function(): (ajv | ajv.Ajv)}\n */\nfunction getValidatorFactory(specSchema, options) {\n    const preparedSpecSchema = _createReferenceSchema(specSchema);\n    return () => {\n        const validator = new Ajv(options);\n        _applyDraft04Schema(validator);\n        _addFormatValidators(validator);\n\n        validator.addSchema(preparedSpecSchema);\n\n        return validator;\n    };\n}\n\n/**\n * Compiles the validator-function.\n * @param {ajv | ajv.Ajv}   validator       Validator-instance\n * @param {Object}          responseSchema  The response-schema, against the examples will be validated\n * @returns {ajv.ValidateFunction}\n */\nfunction compileValidate(validator, responseSchema) {\n    const preparedResponseSchema = _prepareResponseSchema(responseSchema, ID__RESPONSE_SCHEMA);\n    _replaceRefsToPreparedSpecSchema(preparedResponseSchema);\n    let result;\n    try {\n        result = validator.compile(preparedResponseSchema);\n    } catch (e) {\n        result = () => {};\n        result.errors = [e];\n    }\n    return result;\n}\n\n/**\n * Prepares the schema, to be used with internal-references\n * @param {Object}  specSchema  The schema to be prebared\n * @param {String}  idSchema    The unique ID for the schema\n * @returns {Object}\n * @private\n */\nfunction _prepareResponseSchema(specSchema, idSchema) {\n    const preparedSchema = Object.assign({}, specSchema);\n    preparedSchema[PROP__ID] = idSchema;\n    return preparedSchema;\n}\n\n/**\n * Replaces all internal references to the schema, with the extracted references, based on the origin OpenAPI-spec\n * @param {Object}  schema  The schema, containing references have to be replaced\n * @private\n */\nfunction _replaceRefsToPreparedSpecSchema(schema) {\n    jsonPath({\n        path: JSON_PATH__REFS,\n        json: schema,\n        callback(value, type, payload) {\n            if (!value.startsWith('#')) { return; }\n            payload.parent[payload.parentProperty] = `${ ID__SPEC_SCHEMA }${ value }`;\n        }\n    });\n}\n\n/**\n * Extracts all references and returns a new schema, containing only those.\n * @param {Object} specSchema   Schema, which references shall be extracted\n * @returns {Object}\n * @private\n */\nfunction _createReferenceSchema(specSchema) {\n    const refSchema = {\n        [PROP__ID]: ID__SPEC_SCHEMA\n    };\n    jsonPath({\n        path: JSON_PATH__REFS,\n        json: specSchema,\n        callback(value) {\n            if (!value.startsWith('#')) { return; }\n            const pointer = value.substring(1),\n                definition = JsonPointer.get(specSchema, pointer);\n            JsonPointer.set(refSchema, pointer, definition);\n        }\n    });\n    return refSchema;\n}\n\n/**\n * Adds format-validators that are not included in the reference-implementation\n * @param {ajv.Ajv} validator\n * @private\n */\nfunction _addFormatValidators(validator) {\n    validator.addFormat('int32', { type: 'number', validate: FormatValidator.int32 });\n    validator.addFormat('int64', { type: 'string', validate: FormatValidator.int64 });\n    validator.addFormat('float', { type: 'number', validate: FormatValidator.float });\n    validator.addFormat('double', { type: 'number', validate: FormatValidator.double });\n    validator.addFormat('byte', { type: 'string', validate: FormatValidator.byte });\n}\n\n/**\n * Adds the JSON schema draft-04 schema as default to the validator.\n * The OpenAPI specifications rely on draft-04 and draft-05.\n * Draft-04 is used here because of recommendations made here: https://json-schema.org/draft-05/README.html\n * @param {ajv.Ajv} validator\n * @private\n */\nfunction _applyDraft04Schema(validator) {\n    validator.removeSchema('');\n    validator.addMetaSchema(draft4MetaSchema, draft4MetaSchema.id);\n    validator._opts.defaultMeta = draft4MetaSchema.id;\n}\n","module.exports = {\"id\":\"http://json-schema.org/draft-04/schema#\",\"$schema\":\"http://json-schema.org/draft-04/schema#\",\"description\":\"Core schema meta-schema\",\"definitions\":{\"schemaArray\":{\"type\":\"array\",\"minItems\":1,\"items\":{\"$ref\":\"#\"}},\"positiveInteger\":{\"type\":\"integer\",\"minimum\":0},\"positiveIntegerDefault0\":{\"allOf\":[{\"$ref\":\"#/definitions/positiveInteger\"},{\"default\":0}]},\"simpleTypes\":{\"enum\":[\"array\",\"boolean\",\"integer\",\"null\",\"number\",\"object\",\"string\"]},\"stringArray\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"minItems\":1,\"uniqueItems\":true}},\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"$schema\":{\"type\":\"string\"},\"title\":{\"type\":\"string\"},\"description\":{\"type\":\"string\"},\"default\":{},\"multipleOf\":{\"type\":\"number\",\"minimum\":0,\"exclusiveMinimum\":true},\"maximum\":{\"type\":\"number\"},\"exclusiveMaximum\":{\"type\":\"boolean\",\"default\":false},\"minimum\":{\"type\":\"number\"},\"exclusiveMinimum\":{\"type\":\"boolean\",\"default\":false},\"maxLength\":{\"$ref\":\"#/definitions/positiveInteger\"},\"minLength\":{\"$ref\":\"#/definitions/positiveIntegerDefault0\"},\"pattern\":{\"type\":\"string\",\"format\":\"regex\"},\"additionalItems\":{\"anyOf\":[{\"type\":\"boolean\"},{\"$ref\":\"#\"}],\"default\":{}},\"items\":{\"anyOf\":[{\"$ref\":\"#\"},{\"$ref\":\"#/definitions/schemaArray\"}],\"default\":{}},\"maxItems\":{\"$ref\":\"#/definitions/positiveInteger\"},\"minItems\":{\"$ref\":\"#/definitions/positiveIntegerDefault0\"},\"uniqueItems\":{\"type\":\"boolean\",\"default\":false},\"maxProperties\":{\"$ref\":\"#/definitions/positiveInteger\"},\"minProperties\":{\"$ref\":\"#/definitions/positiveIntegerDefault0\"},\"required\":{\"$ref\":\"#/definitions/stringArray\"},\"additionalProperties\":{\"anyOf\":[{\"type\":\"boolean\"},{\"$ref\":\"#\"}],\"default\":{}},\"definitions\":{\"type\":\"object\",\"additionalProperties\":{\"$ref\":\"#\"},\"default\":{}},\"properties\":{\"type\":\"object\",\"additionalProperties\":{\"$ref\":\"#\"},\"default\":{}},\"patternProperties\":{\"type\":\"object\",\"additionalProperties\":{\"$ref\":\"#\"},\"default\":{}},\"dependencies\":{\"type\":\"object\",\"additionalProperties\":{\"anyOf\":[{\"$ref\":\"#\"},{\"$ref\":\"#/definitions/stringArray\"}]}},\"enum\":{\"type\":\"array\",\"minItems\":1,\"uniqueItems\":true},\"type\":{\"anyOf\":[{\"$ref\":\"#/definitions/simpleTypes\"},{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/simpleTypes\"},\"minItems\":1,\"uniqueItems\":true}]},\"format\":{\"type\":\"string\"},\"allOf\":{\"$ref\":\"#/definitions/schemaArray\"},\"anyOf\":{\"$ref\":\"#/definitions/schemaArray\"},\"oneOf\":{\"$ref\":\"#/definitions/schemaArray\"},\"not\":{\"$ref\":\"#\"}},\"dependencies\":{\"exclusiveMaximum\":[\"maximum\"],\"exclusiveMinimum\":[\"minimum\"]},\"default\":{}}","module.exports = require(\"ajv\");","module.exports = require(\"decimal.js\");","module.exports = require(\"errno\");","module.exports = require(\"glob\");","module.exports = require(\"json-pointer\");","module.exports = require(\"json-schema-ref-parser\");","module.exports = require(\"jsonpath-plus\");","module.exports = require(\"lodash.clonedeep\");","module.exports = require(\"lodash.flatmap\");","module.exports = require(\"lodash.flatten\");","module.exports = require(\"lodash.merge\");","module.exports = require(\"yaml\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(442);\n"],"names":["Decimal","RANGES","byte","min","max","int32","int64","float","pow","negated","double","module","exports","data","Number","isInteger","greaterThanOrEqualTo","lessThanOrEqualTo","len","length","test","firstPaddingChar","indexOf","merge","require","ENOENT","ErrorType","jsENOENT","code","jsonPathNotFound","errorAndErrorsMutuallyExclusive","parseError","validation","ApplicationError","err","message","path","cause","type","options","params","constructor","Object","assign","this","parent","parentProperty","pointer","value","implV2","implV3","REGEX__OPEN_API","getImplementation","openapiSpec","swagger","openapi","match","JSONPath","jsonPath","ResultType","JSON_PATHS__OBJECTS","JSON_SCHEMA_COMBINERS","_createCallbackObjectTypeForNoAdditionalProperties","asString","JSON","stringify","some","combiner","includes","console","warn","additionalProperties","_find","json","resultType","callback","flatten","setNoAdditionalProperties","openApiSpec","examplePaths","createCallback","paths","Set","forEach","jsPath","add","examplePath","exampleMatch","startsWith","delete","_excludeExamples","cloneDeep","getJsonPathsToExamples","buildValidationMap","pathsExamples","reduce","validationMap","pathExample","pathSchema","pathSegs","toPathArray","slice","idxExamples","lastIndexOf","splice","toPathString","_getSchemaPathOfExample","escapeExampleName","rawPath","prepare","noAdditionalProperties","openapiSpecCopy","unescapeExampleNames","ExampleType","exampleTypesOfSchemas","Map","pathSchemaAsArray","exampleType","idxExample","exampleTypeOfSchema","get","pathContextAsArray","create","pathContext","toPointer","_throwMutuallyExclusiveError","set","replace","flatMap","fs","glob","yaml","refParser","createError","getValidatorFactory","compileValidate","Determiner","createValidationResponse","dereferenceJsonSchema","SYM__INTERNAL","Symbol","PROP__SCHEMAS_WITH_EXAMPLES","FILE_EXTENSIONS__YAML","ErrorJsonPathNotFound","async","validateExamples","ignoreFormats","impl","dereference","res","pathToExamples","concat","jsonPathToExamples","_extractExamplePaths","map","statistics","_initStatistics","validationResult","valid","errors","createValidator","_initValidatorFactory","error","push","keys","example","_getObjectByPath","schema","_extractSchema","curErrors","_validateExample","_validateSchema","_validateExamplesPaths","_parseSpec","filePath","isYaml","extension","split","pop","_isFileTypeYaml","jsonSchema","parse","readFileSync","e","name","_validate","validationHandler","_handleExamplesByMapValidation","mapExternalExamples","cwdToMappingFile","dirPathMapExternalExamples","entries","filePathsExample","filePathExample","resolvedFilePathExample","join","examplesTotal","examplesWithoutSchema","defineProperty","enumerable","size","wrap","validate","exampleFilePath","specSchema","schemaId","allErrors","nullable","formats","result","entry","suppressErrorIfNotFound","validateFile","validateExample","filePathSchema","validateExamplesByMap","globMapExternalExamples","matchingFilePathsMapping","filePathsMaps","sync","nonull","responses","filePathMapExternalExamples","dirname","mapFilePath","response","response2","response1","key","val","schemasWithExample","values","pathToSchema","currentWorkingDir","process","cwd","chdir","dereferencedSchema","JsonPointer","Ajv","FormatValidator","draft4MetaSchema","JSON_PATH__REFS","ID__SPEC_SCHEMA","preparedSpecSchema","refSchema","substring","definition","_createReferenceSchema","validator","removeSchema","addMetaSchema","id","_opts","defaultMeta","_applyDraft04Schema","addFormat","_addFormatValidators","addSchema","responseSchema","preparedResponseSchema","idSchema","preparedSchema","_prepareResponseSchema","payload","compile","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}