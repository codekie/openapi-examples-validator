{"version":3,"file":"index.js","mappings":"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","sources":["webpack://openapi-examples-validator/./src/application-error.js","webpack://openapi-examples-validator/./src/const/result-type.js","webpack://openapi-examples-validator/./src/impl/index.js","webpack://openapi-examples-validator/./src/impl/service/all-properties-required.js","webpack://openapi-examples-validator/./src/impl/service/common.js","webpack://openapi-examples-validator/./src/impl/service/no-additional-properties.js","webpack://openapi-examples-validator/./src/impl/v2/index.js","webpack://openapi-examples-validator/./src/impl/v3/index.js","webpack://openapi-examples-validator/./src/index.js","webpack://openapi-examples-validator/./src/utils/index.js","webpack://openapi-examples-validator/./src/validator.js","webpack://openapi-examples-validator/external commonjs \"ajv-draft-04\"","webpack://openapi-examples-validator/external commonjs \"ajv-formats\"","webpack://openapi-examples-validator/external commonjs \"errno\"","webpack://openapi-examples-validator/external commonjs \"glob\"","webpack://openapi-examples-validator/external commonjs \"json-pointer\"","webpack://openapi-examples-validator/external commonjs \"json-schema-ref-parser\"","webpack://openapi-examples-validator/external commonjs \"jsonpath-plus\"","webpack://openapi-examples-validator/external commonjs \"lodash.clonedeep\"","webpack://openapi-examples-validator/external commonjs \"lodash.flatmap\"","webpack://openapi-examples-validator/external commonjs \"lodash.flatten\"","webpack://openapi-examples-validator/external commonjs \"lodash.merge\"","webpack://openapi-examples-validator/external commonjs \"yaml\"","webpack://openapi-examples-validator/external node-commonjs \"fs\"","webpack://openapi-examples-validator/external node-commonjs \"path\"","webpack://openapi-examples-validator/webpack/bootstrap","webpack://openapi-examples-validator/webpack/startup"],"sourcesContent":["const\n    merge = require('lodash.merge'),\n    { ENOENT } = require('errno').code;\n\n// TYPEDEFINITIONS\n\n/**\n * @typedef {{}} CustomError\n * @augments Error\n */\n\n/**\n * ApplicationErrorOptions\n * @typedef {{\n *      [instancePath]: string,\n *      [examplePath]: string,\n *      [exampleFilePath]: string,\n *      [keyword]: string,\n *      [message]: string,\n *      [mapFilePath]: string,\n *      [params]: {\n *          [path]: string,\n *          [missingProperty]: string,\n *          [type]: string\n *      },\n *      [schemaPath]: string\n * }} ApplicationErrorOptions\n */\n\n// CONSTANTS\n\nconst ErrorType = {\n    jsENOENT: ENOENT.code,\n    jsonPathNotFound: 'JsonPathNotFound',\n    errorAndErrorsMutuallyExclusive: 'ErrorErrorsMutuallyExclusive',\n    parseError: 'ParseError',\n    validation: 'Validation'\n};\n\n// CLASSES\n\n/**\n * Unified application-error\n */\nclass ApplicationError {\n    /**\n     * Factory-function, which is able to consume validation-errors and JS-errors. If a validation error is passed, all\n     * properties will be adopted.\n     * @param {Error|CustomError}   err     Javascript-, validation- or custom-error, to create the application-error\n     *                                      from\n     * @returns {ApplicationError} Unified application-error instance\n     */\n    static create(err) {\n        const { code, message, path, cause } = err,               // Certain properties of Javascript-errors\n            type = code || err.type || ErrorType.validation,    // If `code` is available then it's a Javascript-error\n            options = { message };\n        if (ErrorType.validation === type || ErrorType.errorAndErrorsMutuallyExclusive === type) {\n            // For certain, created error-types, copy all properties\n            merge(options, err);\n        } else {\n            // Copy certain properties of Javascript-error (but only if available)\n            path && merge(options, { params: { path } });\n            cause && merge(options, cause);\n        }\n        return new ApplicationError(type, options);\n    }\n\n    /**\n     * Constructor\n     * @param {string}                  type        Type of error (see statics)\n     * @param {ApplicationErrorOptions} [options]   Optional properties\n     */\n    constructor(type, options = {}) {\n        Object.assign(this, {\n            type,\n            ...options\n        });\n    }\n}\n\n// PUBLIC API\n\nmodule.exports = {\n    ApplicationError,\n    ErrorType\n};\n","module.exports = {\n    parent: 'parent',\n    parentProperty: 'parentProperty',\n    path: 'path',\n    pointer: 'pointer',\n    value: 'value'\n};\n","/**\n * Entry point for logic that only applies to specific versions of the OpenAPI-spec\n */\n\nconst implV2 = require('./v2/index'),\n    implV3 = require('./v3/index');\n\nconst REGEX__OPEN_API = /^3\\./;\n\nmodule.exports = {\n    getImplementation\n};\n\n/**\n * Get the version-specific implementation for the OpenAPI-spec. Currently v2 and v3 are supported\n * @param {Object}  openapiSpec OpenAPI-spec\n * @returns {Object|null}\n */\nfunction getImplementation(openapiSpec) {\n    if (typeof openapiSpec.swagger === 'string') {\n        return implV2;\n    }\n    if (openapiSpec.openapi && openapiSpec.openapi.match(REGEX__OPEN_API)) {\n        return implV3;\n    }\n    return null;\n}\n","const { applyCallbackToAllObjectModels } = require('./common');\n\nmodule.exports = {\n    setAllPropertiesRequired\n};\n\n/**\n * Sets all properties of each object to required\n * @param {Object}                  openApiSpec         The to-be-modified schema\n * @param {Array.<String>}          [examplePaths=[]]   The paths to the examples, which's content must not be modified\n */\nfunction setAllPropertiesRequired(openApiSpec, examplePaths = []) {\n    applyCallbackToAllObjectModels(openApiSpec, examplePaths,\n        () => {\n            return (value) => {\n                if (value.hasOwnProperty('properties')) {\n                    value.required = Object.keys(value.properties);\n                }\n            };\n        });\n}\n","const { JSONPath: jsonPath } = require('jsonpath-plus'),\n    ResultType = require('../../const/result-type');\n\nmodule.exports = {\n    applyCallbackToAllObjectModels\n};\n\n/**\n * @typedef {{\n *     path: String,\n *     value: Object,\n *     parent: Object,\n *     parentProperty: String,\n *     hasArrExpr: Boolean\n * }} JsonPathMatchData\n */\n\n/**\n * Callback that is applied to a JSONPath-match.\n * @callback JsonPathMatchCallback\n * @param {Object}              value       Value of the matched property\n * @param {String}              resultType  Result-type of the query\n * @param {JsonPathMatchData}   data        Object that contains additional data to the match\n */\n\n/**\n * Function to build a callback that is applied to a JSONPath-match.\n * @callback JsonPathMatchCallbackBuilder\n * @param {string}                 jsPath  Path to the property that matched\n * @return {JsonPathMatchCallback}         Callback that is applied to a JSONPath-match\n */\n\n/**\n * Apply the input rule to all models of type object in the input openApiSpec\n * @param {Object}                 openApiSpec           The to-be-modified schema\n * @param {Array.<String>}         [examplePaths]        The paths to the examples, which's content must not be modified\n * @param {JsonPathMatchCallbackBuilder}  [matchCallbackBuilder]  Function to build a callback\n *                                                                that will be called on each match\n */\nfunction applyCallbackToAllObjectModels(openApiSpec, examplePaths, matchCallbackBuilder) {\n    // Find all matches\n    const paths = new Set();\n    _find(openApiSpec, '$..schema..')\n        .forEach(match => {\n            if (_isPropertiesDefinition(match)) { return; }\n            paths.add(match);\n        });\n    // Exclude examples\n    _excludeExamples(openApiSpec, paths, examplePaths);\n    // Set flag\n    for (const jsPath of paths) {\n        const callback = matchCallbackBuilder(jsPath);\n        _find(openApiSpec, jsPath, ResultType.value, (result, resultType, data) => {\n            if (!_isObjectDefinition(result)) { return; }\n            callback(result, resultType, data);\n        });\n    }\n}\n\n/**\n * Find matching elements in JSON.\n * @param {Object}                  json                JSON to be searched\n * @param {String}                  path                JSON-path to search\n * @param {String}                  [resultType=\"path\"] Result-type of the query\n * @param {JsonPathMatchCallback}   [callback]          Function to be called on a match\n * @returns {any} Result of the query, depending on the `resultType`\n * @private\n */\nfunction _find(json, path, resultType = ResultType.path, callback) {\n    return jsonPath({\n        json,\n        path,\n        flatten: true,\n        resultType,\n        callback\n    });\n}\n\n/**\n * Remove JSON-paths from `paths` that are included in `examplePaths`\n * @param {Object}          openApiSpec     Open-API spec to search in\n * @param {Set.<String>}    paths           Paths where the examples have to be removed from\n * @param {Array.<String>}  examplePaths    JSON-paths of the examples\n * @private\n */\nfunction _excludeExamples(openApiSpec, paths, examplePaths) {\n    examplePaths\n        .forEach(examplePath => {\n            _find(openApiSpec, examplePath)\n                .forEach(exampleMatch => {\n                    for (const jsPath of paths) {\n                        jsPath.startsWith(exampleMatch) && paths.delete(jsPath);\n                    }\n                });\n        });\n}\n\nfunction _isPropertiesDefinition(path) {\n    // Path has to end with `properties`\n    if (!path.match(/\\['properties']$/)) { return; }\n    // Every second consecutive `properties` actually is not a property-definition, but a property itself\n    const consecutiveMatch = path.match(/(?<!\\['properties'])(\\['properties']\\['properties'])+$/);\n    return !consecutiveMatch || consecutiveMatch.length % 2 !== 0;\n}\n\nfunction _isObjectDefinition(entity) {\n    return entity.type === 'object' || entity.properties;\n}\n","const { applyCallbackToAllObjectModels } = require('./common');\n\nmodule.exports = {\n    setNoAdditionalProperties\n};\n\nconst JSON_SCHEMA_COMBINERS = [\n    'oneOf',\n    'allOf',\n    'anyOf',\n    'not'\n];\n\n/**\n * Sets the flag to indicate that it doesn't allow properties that are not described in the schema\n * @param {Object}                  openApiSpec         The to-be-modified schema\n * @param {Array.<String>}          [examplePaths=[]]   The paths to the examples, which's content must not be modified\n */\nfunction setNoAdditionalProperties(openApiSpec, examplePaths = []) {\n    // Match all combiner keywords that are not preceded by a 'properties' keyword.\n    // This allow to have objects that have as property name one of the combiner keywords.\n    const hasJsonCombinerParentRegex\n        = new RegExp('(?<!\\\\[\\'properties\\'\\\\])\\\\[\\'(?:' + JSON_SCHEMA_COMBINERS.join('|') + ')\\'\\\\]');\n\n    applyCallbackToAllObjectModels(openApiSpec, examplePaths,\n        (path) => {\n            return (schema) => {\n                // Exclude schema that have a JSON combiner as parent\n                if (hasJsonCombinerParentRegex.test(path)) {\n                    console.warn('\"additionalProperties\" flag not set '\n                        + `for ${path} because it has a parent with a JSON-schema combiner keyword.`);\n                    return;\n                }\n                // Exclude schema that contains a JSON combiner\n                if (JSON_SCHEMA_COMBINERS.some((combiner) => schema.hasOwnProperty(combiner))) {\n                    console.warn('\"additionalProperties\" flag not set '\n                        + `for ${path} because it contains JSON-schema combiner keyword.`);\n                    return;\n                }\n                // Exclude schema that already contains additionalProperties\n                if (schema.hasOwnProperty('additionalProperties')) {\n                    return;\n                }\n                schema.additionalProperties = false;\n            };\n        });\n}\n","/**\n * Contains validation-logic that is specific to V2 of the OpenAPI-spec\n */\n\nconst cloneDeep = require('lodash.clonedeep'),\n    { setAllPropertiesRequired } = require('../service/all-properties-required'),\n    { setNoAdditionalProperties } = require('../service/no-additional-properties');\n\n// CONSTANTS\n\nconst PATH__EXAMPLES = '$..examples[?(@property.match(/[\\/+]json/))]',\n    PROP__SCHEMA = 'schema',\n    PROP__EXAMPLES = 'examples';\n\nmodule.exports = {\n    buildValidationMap,\n    getJsonPathsToExamples,\n    prepare\n};\n\n// IMPLEMENTATION DETAILS\n\n/**\n * Get the JSONPaths to the examples\n * @returns {Array.<String>}    JSONPaths to the examples\n */\nfunction getJsonPathsToExamples() { return [PATH__EXAMPLES]; }\n\n\n\n/**\n * Builds a map with the json-pointers to the response-schema as key and the json-pointers to the examples, as value.\n * The pointer of the schema is derived from the pointer to the example and doesn't necessarily mean\n * that the schema actually exists.\n * @param {Array.<String>}  pathsExamples   Paths to the examples\n * @returns {Object.<String, String>} Map with schema-pointers as key and example-pointers as value\n * @private\n */\nfunction buildValidationMap(pathsExamples) {\n    return pathsExamples.reduce((validationMap, pathExample) => {\n        const pathSchema = _getSchemaPointerOfExample(pathExample);\n        validationMap[pathSchema] = (validationMap[pathSchema] || new Set())\n            .add(pathExample);\n        return validationMap;\n    }, {});\n}\n\n/**\n * Pre-processes the OpenAPI-spec, for further use.\n * The passed spec won't be modified. If a modification happens, a modified copy will be returned.\n * @param {Object}  openapiSpec                     The OpenAPI-spec as JSON-schema\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not defined in the schema\n * @param {boolean} [allPropertiesRequired=false]   Make all properties required\n * @return {Object} The prepared OpenAPI-spec\n */\nfunction prepare(openapiSpec, { noAdditionalProperties, allPropertiesRequired } = {}) {\n    const openapiSpecCopy = cloneDeep(openapiSpec);\n    noAdditionalProperties && setNoAdditionalProperties(openapiSpecCopy, getJsonPathsToExamples());\n    allPropertiesRequired && setAllPropertiesRequired(openapiSpecCopy, getJsonPathsToExamples());\n    return openapiSpecCopy;\n}\n\n/**\n * Gets a JSON-pointer to the corresponding response-schema, based on a JSON-pointer to an example.\n * @param {String}  examplePointer JSON-pointer to example\n * @returns {String} JSON-pointer to the corresponding response-schema\n * @private\n */\nfunction _getSchemaPointerOfExample(examplePointer) {\n    const pathSegs = examplePointer.split('/'),\n        idxExamples = pathSegs.lastIndexOf(PROP__EXAMPLES);\n    pathSegs.splice(idxExamples, pathSegs.length - idxExamples, PROP__SCHEMA);\n    return pathSegs.join('/');\n}\n","/**\n * Contains validation-logic that is specific to V3 of the OpenAPI-spec\n */\n\nconst cloneDeep = require('lodash.clonedeep'),\n    { ApplicationError, ErrorType } = require('../../application-error'),\n    { setAllPropertiesRequired } = require('../service/all-properties-required'),\n    { setNoAdditionalProperties } = require('../service/no-additional-properties');\n\n// CONSTANTS\n\nconst RESPONSES = '$..responses..content[?(@property.match(/[\\/+]json/))]';\nconst REQUEST = '$..requestBody.content[?(@property.match(/[\\/+]json/))]';\nconst SINGLE_EXAMPLE = '.example';\nconst MANY_EXAMPLES = '.examples.*.value';\n\nconst PATH__EXAMPLE = `${RESPONSES}${SINGLE_EXAMPLE}`,\n    PATH__EXAMPLES = `${RESPONSES}${MANY_EXAMPLES}`,\n    PATH__EXAMPLE__PARAMETER = '$..parameters..example',\n    PATH__EXAMPLES__PARAMETER = '$..parameters..examples.*.value',\n    PATH__EXAMPLE__REQUEST_BODY = `${REQUEST}${SINGLE_EXAMPLE}`,\n    PATH__EXAMPLES__REQUEST_BODY = `${REQUEST}${MANY_EXAMPLES}`,\n    PROP__SCHEMA = 'schema',\n    PROP__EXAMPLE = 'example',\n    PROP__EXAMPLES = 'examples';\n\nconst ExampleType = {\n    single: 'single',\n    multi: 'multi'\n};\n\n// PUBLIC API\n\nmodule.exports = {\n    buildValidationMap,\n    getJsonPathsToExamples,\n    prepare\n};\n\n// IMPLEMENTATION DETAILS\n\n/**\n * Get the JSONPaths to the examples\n * @returns {Array.<String>}    JSONPaths to the examples\n */\nfunction getJsonPathsToExamples() {\n    return [\n        PATH__EXAMPLE,\n        PATH__EXAMPLES,\n        PATH__EXAMPLE__PARAMETER,\n        PATH__EXAMPLES__PARAMETER,\n        PATH__EXAMPLE__REQUEST_BODY,\n        PATH__EXAMPLES__REQUEST_BODY\n    ];\n}\n\n/**\n * Builds a map with the json-pointers to the response-schema as key and the json-pointers to the examples, as value.\n * The pointer of the schema is derived from the pointer to the example and doesn't necessarily mean\n * that the schema actually exists.\n * @param {Array.<String>}  pathsExamples   Paths to the examples\n * @returns {Object.<String, String>} Map with schema-pointers as key and example-pointers as value\n * @private\n */\nfunction buildValidationMap(pathsExamples) {\n    const exampleTypesOfSchemas = new Map();\n    return pathsExamples.reduce((validationMap, pathExample) => {\n        const { pathSchemaAsArray, exampleType } = _getSchemaPointerOfExample(pathExample),\n            pathSchema = pathSchemaAsArray.join('/'),\n            exampleTypeOfSchema = exampleTypesOfSchemas.get(pathSchema);\n        if (exampleTypeOfSchema) {\n            exampleTypeOfSchema !== exampleType && _throwMutuallyExclusiveError(pathSchemaAsArray);\n        }\n        exampleTypesOfSchemas.set(pathSchema, exampleType);\n        validationMap[pathSchema] = (validationMap[pathSchema] || new Set())\n            .add(pathExample);\n        return validationMap;\n    }, {});\n}\n\n/**\n * Pre-processes the OpenAPI-spec, for further use.\n * The passed spec won't be modified. If a modification happens, a modified copy will be returned.\n * @param {Object}  openapiSpec     The OpenAPI-spec as JSON-schema\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not defined in the schema\n * @param {boolean} [allPropertiesRequired=false]   Make all properties required\n * @return {Object} The prepared OpenAPI-spec\n */\nfunction prepare(openapiSpec, { noAdditionalProperties, allPropertiesRequired } = {}) {\n    const openapiSpecCopy = cloneDeep(openapiSpec);\n    noAdditionalProperties && setNoAdditionalProperties(openapiSpecCopy, getJsonPathsToExamples());\n    allPropertiesRequired && setAllPropertiesRequired(openapiSpecCopy, getJsonPathsToExamples());\n    return openapiSpecCopy;\n}\n\n/**\n * Gets a JSON-pointer to the corresponding response-schema, based on a JSON-pointer to an example.\n *\n * It is assumed that the JSON-pointer to the example is valid and existing.\n * @param {String}  examplePointer JSON-pointer to example\n * @returns {{\n *     exampleType: ExampleType,\n *     pathSchema: String\n * }} JSON-path to the corresponding response-schema\n * @private\n */\nfunction _getSchemaPointerOfExample(examplePointer) {\n    const pathSegs = examplePointer.split('/'),\n        idxExample = pathSegs.lastIndexOf(PROP__EXAMPLE),\n        /** @type ExampleType */\n        exampleType = idxExample > -1\n            ? ExampleType.single\n            : ExampleType.multi,\n        idxExamples = exampleType === ExampleType.single\n            ? idxExample\n            : pathSegs.lastIndexOf(PROP__EXAMPLES);\n    pathSegs.splice(idxExamples, pathSegs.length - idxExamples, PROP__SCHEMA);\n    return {\n        exampleType,\n        pathSchemaAsArray: pathSegs\n    };\n}\n\n\n/**\n * Checks if only `example` or `examples` is set for the schema, as they are mutually exclusive by OpenAPI-spec.\n * @param {Array.<String>}  pathSchemaAsArray   JSON-path to the Schema, as JSON-path-array\n * @throws ApplicationError if both are set\n * @private\n */\nfunction _throwMutuallyExclusiveError(pathSchemaAsArray) {\n    const pathContextAsArray = pathSchemaAsArray.slice(0, pathSchemaAsArray.length - 1);    // Strip `schema` away\n    throw ApplicationError.create({\n        type: ErrorType.errorAndErrorsMutuallyExclusive,\n        message: 'Properties \"error\" and \"errors\" are mutually exclusive',\n        params: {\n            pathContext: pathContextAsArray.join('/')\n        }\n    });\n}\n","/**\n * Entry-point for the validator-API\n */\n\nconst\n    merge = require('lodash.merge'),\n    flatten = require('lodash.flatten'),\n    flatMap = require('lodash.flatmap'),\n    jsonPointer = require('json-pointer'),\n    fs = require('fs'),\n    path = require('path'),\n    glob = require('glob'),\n    yaml = require('yaml'),\n    { JSONPath: jsonPath } = require('jsonpath-plus'),\n    refParser = require('json-schema-ref-parser'),\n    { createError } = require('errno').custom,\n    ResultType = require('./const/result-type'),\n    { getValidatorFactory, compileValidate } = require('./validator'),\n    Determiner = require('./impl'),\n    { ApplicationError, ErrorType } = require('./application-error'),\n    { createValidationResponse, dereferenceJsonSchema } = require('./utils');\n\n// CONSTANTS\n\nconst SYM__INTERNAL = Symbol('internal'),\n    PROP__SCHEMAS_WITH_EXAMPLES = 'schemasWithExamples',\n    FILE_EXTENSIONS__YAML = [\n        'yaml',\n        'yml'\n    ];\n\n// STATICS\n\n/**\n * ErrorJsonPathNotFound\n * @typedef {{\n *      cause: {\n *          [params]: {\n *              [path]: string\n *          }\n *      }\n * }} ErrorJsonPathNotFound\n * @augments CustomError\n */\n\n/**\n * @constructor\n * @augments CustomError\n * @returns {ErrorJsonPathNotFound}\n */\nconst ErrorJsonPathNotFound = createError(ErrorType.jsonPathNotFound);\n\n// PUBLIC API\n\nmodule.exports = {\n    'default': validateExamples,\n    validateFile,\n    validateExample,\n    validateExamplesByMap,\n    getValidatorFactory\n};\n\n// IMPLEMENTATION DETAILS\n\n// Type definitions\n\n/**\n * ValidationStatistics\n * @typedef {{\n *      schemasWithExamples: number,\n *      examplesTotal: number,\n *      examplesWithoutSchema: number,\n *      [matchingFilePathsMapping]: number\n * }} ValidationStatistics\n */\n\n/**\n * ValidationResponse\n * @typedef {{\n *      valid: boolean,\n *      statistics: ValidationStatistics,\n *      errors: Array.<ApplicationError>\n * }} ValidationResponse\n */\n\n/**\n * @callback ValidationHandler\n * @param {ValidationStatistics}    statistics\n * @returns {Array.<ApplicationError>}\n */\n\n// Public\n\n/**\n * Validates OpenAPI-spec with embedded examples.\n * @param {Object}  openapiSpec OpenAPI-spec\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not defined in the schema\n * @param {boolean} [allPropertiesRequired=false]   Make all properties required\n * @param {Array.<string>} [ignoreFormats]          List of datatype formats that shall be ignored (to prevent\n *                                                  \"unsupported format\" errors). If an Array with only one string is\n *                                                  provided where the formats are separated with `\\n`, the entries\n *                                                  will be expanded to a new array containing all entries.\n * @param {Function} [specPostprocessor]            Provides implementation of spec postprocessor\n * @param {Function} [validatorFactory]             Validator factory provider\n * @returns {ValidationResponse}\n */\nasync function validateExamples(openapiSpec, { noAdditionalProperties, ignoreFormats, allPropertiesRequired,\n    specPostprocessor = (spec) => spec,\n    validatorFactory = (spec, { ignoreFormats }) => _initValidatorFactory(spec, { ignoreFormats })\n} = {}) {\n    const impl = Determiner.getImplementation(openapiSpec);\n    openapiSpec = await refParser.dereference(openapiSpec);\n    openapiSpec = impl.prepare(openapiSpec, { noAdditionalProperties, allPropertiesRequired });\n    if (typeof specPostprocessor === 'function') {\n        openapiSpec = specPostprocessor(openapiSpec);\n    }\n    let pathsExamples = impl.getJsonPathsToExamples()\n        .reduce((res, pathToExamples) => {\n            return res.concat(_pathToPointer(openapiSpec, pathToExamples));\n        }, [])\n        .map(impl.escapeExampleName);\n    const createValidator = validatorFactory(openapiSpec, { ignoreFormats });\n    return _validateExamplesPaths({ impl, createValidator }, pathsExamples, openapiSpec);\n}\n\n/**\n * Validates OpenAPI-spec with embedded examples.\n * @param {string}  filePath                        File-path to the OpenAPI-spec\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not defined in the schema\n * @param {boolean} [allPropertiesRequired=false]   Make all properties required\n * @param {Array.<string>} [ignoreFormats]          List of datatype formats that shall be ignored (to prevent\n *                                                  \"unsupported format\" errors). If an Array with only one string is\n *                                                  provided where the formats are separated with `\\n`, the entries\n *                                                  will be expanded to a new array containing all entries.\n * @returns {ValidationResponse}\n */\nasync function validateFile(filePath, { noAdditionalProperties, ignoreFormats, allPropertiesRequired } = {}) {\n    let openapiSpec = null;\n    try {\n        openapiSpec = await _parseSpec(filePath);\n    } catch (err) {\n        return createValidationResponse({ errors: [ApplicationError.create(err)] });\n    }\n    return validateExamples(openapiSpec, { noAdditionalProperties, ignoreFormats, allPropertiesRequired });\n}\n\n/**\n * Validates examples by mapping-files.\n * @param {string}  filePathSchema              File-path to the OpenAPI-spec\n * @param {string}  globMapExternalExamples     File-path (globs are supported) to the mapping-file containing JSON-\n *                                              paths to schemas as key and a single file-path or Array of file-paths\n *                                              to external examples\n * @param {boolean} [cwdToMappingFile=false]    Change working directory for resolving the example-paths (relative to\n *                                              the mapping-file)\n * @param {boolean} [noAdditionalProperties=false] Don't allow properties that are not defined in the schema\n * @param {boolean} [allPropertiesRequired=false]  Make all properties required\n * @param {Array.<string>} [ignoreFormats]      List of datatype formats that shall be ignored (to prevent\n *                                              \"unsupported format\" errors). If an Array with only one string is\n *                                              provided where the formats are separated with `\\n`, the entries\n *                                              will be expanded to a new array containing all entries.\n * @returns {ValidationResponse}\n */\nasync function validateExamplesByMap(filePathSchema, globMapExternalExamples,\n    { cwdToMappingFile, noAdditionalProperties, ignoreFormats, allPropertiesRequired } = {}\n) {\n    let matchingFilePathsMapping = 0;\n    const filePathsMaps = glob.sync(\n        globMapExternalExamples,\n        // Using `nonull`-option to explicitly create an app-error if there's no match for `globMapExternalExamples`\n        { nonull: true }\n    );\n    let responses = [];\n    // for..of here, to support sequential execution of async calls. This is required, since dereferencing the\n    // `openapiSpec` is not concurrency-safe\n    for (const filePathMapExternalExamples of filePathsMaps) {\n        let mapExternalExamples = null,\n            openapiSpec = null;\n        try {\n            mapExternalExamples = JSON.parse(fs.readFileSync(filePathMapExternalExamples, 'utf-8'));\n            openapiSpec = await _parseSpec(filePathSchema);\n            openapiSpec = Determiner.getImplementation(openapiSpec)\n                .prepare(openapiSpec, { noAdditionalProperties, allPropertiesRequired });\n        } catch (err) {\n            responses.push(createValidationResponse({ errors: [ApplicationError.create(err)] }));\n            continue;\n        }\n        // Not using `glob`'s response-length, because it is `1` if there's no match for `globMapExternalExamples`.\n        // Instead, increment on every match\n        matchingFilePathsMapping++;\n        responses.push(\n            _validate(\n                statistics => {\n                    return _handleExamplesByMapValidation(\n                        openapiSpec, mapExternalExamples, statistics, {\n                            cwdToMappingFile,\n                            dirPathMapExternalExamples: path.dirname(filePathMapExternalExamples),\n                            ignoreFormats\n                        }\n                    ).map(\n                        (/** @type ApplicationError */ error) => Object.assign(error, {\n                            mapFilePath: path.normalize(filePathMapExternalExamples)\n                        })\n                    );\n                }\n            )\n        );\n    }\n    return merge(\n        responses.reduce((res, response) => {\n            if (!res) {\n                return response;\n            }\n            return _mergeValidationResponses(res, response);\n        }, null),\n        { statistics: { matchingFilePathsMapping } }\n    );\n}\n\n/**\n * Validates a single external example.\n * @param {String}  filePathSchema                  File-path to the OpenAPI-spec\n * @param {String}  pathSchema                      JSON-path to the schema\n * @param {String}  filePathExample                 File-path to the external example-file\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not described in the schema\n * @param {boolean} [allPropertiesRequired=false]   Make all properties required\n * @param {Array.<string>} [ignoreFormats]          List of datatype formats that shall be ignored (to prevent\n *                                                  \"unsupported format\" errors). If an Array with only one string is\n *                                                  provided where the formats are separated with `\\n`, the entries\n *                                                  will be expanded to a new array containing all entries.\n * @returns {ValidationResponse}\n */\nasync function validateExample(filePathSchema, pathSchema, filePathExample, {\n    noAdditionalProperties,\n    ignoreFormats,\n    allPropertiesRequired\n} = {}) {\n    let example = null,\n        schema = null,\n        openapiSpec = null;\n    try {\n        example = JSON.parse(fs.readFileSync(filePathExample, 'utf-8'));\n        openapiSpec = await _parseSpec(filePathSchema);\n        openapiSpec = Determiner.getImplementation(openapiSpec)\n            .prepare(openapiSpec, { noAdditionalProperties, allPropertiesRequired });\n        schema = _extractSchema(_getSchmaPointer(pathSchema, openapiSpec), openapiSpec);\n    } catch (err) {\n        return createValidationResponse({ errors: [ApplicationError.create(err)] });\n    }\n    return _validate(\n        statistics => _validateExample({\n            createValidator: _initValidatorFactory(openapiSpec, { ignoreFormats }),\n            schema,\n            example,\n            statistics,\n            filePathExample\n        })\n    );\n}\n\n// Private\n\n/**\n * Parses the OpenAPI-spec (supports JSON and YAML)\n * @param {String}  filePath    File-path to the OpenAPI-spec\n * @returns {object}    Parsed OpenAPI-spec\n * @private\n */\nasync function _parseSpec(filePath) {\n    const isYaml = _isFileTypeYaml(filePath);\n    let jsonSchema;\n\n    if (isYaml) {\n        try {\n            jsonSchema = yaml.parse(fs.readFileSync(filePath, 'utf-8'));\n        } catch (e) {\n            const { name, message } = e;\n            throw new ApplicationError(ErrorType.parseError, { message: `${name}: ${message}` });\n        }\n    } else {\n        jsonSchema = JSON.parse(fs.readFileSync(filePath, 'utf-8'));\n    }\n\n    return await dereferenceJsonSchema(filePath, jsonSchema);\n}\n\n/**\n * Determines whether the filePath is pointing to a YAML-file\n * @param {String}  filePath    File-path to the OpenAPI-spec\n * @returns {boolean}   `true`, if the file is a YAML-file\n * @private\n */\nfunction _isFileTypeYaml(filePath) {\n    const extension = filePath.split('.').pop();\n    return FILE_EXTENSIONS__YAML.includes(extension);\n}\n\n/**\n * Top-level validator. Prepares common values, required for the validation, then calles the validator and prepares\n * the result for the output.\n * @param {ValidationHandler}   validationHandler       The handler which performs the validation. It will receive the\n *                                                      statistics-object as argument and has to return an Array of\n *                                                      errors (or an empty Array, when all examples are valid)\n * @returns {ValidationResponse}\n * @private\n */\nfunction _validate(validationHandler) {\n    const statistics = _initStatistics(),\n        errors = validationHandler(statistics);\n    return createValidationResponse({ errors, statistics });\n}\n\n/**\n * Validates examples by a mapping-file.\n * @param {Object}                  openapiSpec                     OpenAPI-spec\n * @param {Object}                  mapExternalExamples             Mapping-file containing JSON-paths to schemas as\n *                                                                  key and a single file-path or Array of file-paths\n *                                                                  to external examples\n * @param {ValidationStatistics}    statistics                      Validation-statistics\n * @param {boolean}                 [cwdToMappingFile=false]        Change working directory for resolving the example-\n *                                                                  paths (relative to the mapping-file)\n * @param {string}                  [dirPathMapExternalExamples]    The directory-path of the mapping-file\n * @param {Array.<string>} [ignoreFormats]          List of datatype formats that shall be ignored (to prevent\n *                                                  \"unsupported format\" errors). If an Array with only one string is\n *                                                  provided where the formats are separated with `\\n`, the entries\n *                                                  will be expanded to a new array containing all entries.\n * @returns {Array.<ApplicationError>}\n * @private\n */\nfunction _handleExamplesByMapValidation(openapiSpec, mapExternalExamples, statistics,\n    { cwdToMappingFile = false, dirPathMapExternalExamples, ignoreFormats }\n) {\n    return flatMap(Object.entries(mapExternalExamples), ([pathSchema, filePathsExample]) => {\n        let schema = null;\n        try {\n            schema = _extractSchema(_getSchmaPointer(pathSchema, openapiSpec), openapiSpec);\n        } catch (/** @type ErrorJsonPathNotFound */ err) {\n            // If the schema can't be found, don't even attempt to process the examples\n            return ApplicationError.create(err);\n        }\n        return flatMap(\n            flatten([filePathsExample]),\n            filePathExample => {\n                let examples = [];\n                try {\n                    const resolvedFilePathExample = cwdToMappingFile\n                        ? path.join(dirPathMapExternalExamples, filePathExample)\n                        : filePathExample;\n                    const globResolvedFilePathExample = glob.sync(resolvedFilePathExample);\n                    if (globResolvedFilePathExample.length === 0) {\n                        return [ApplicationError.create({\n                            type: ErrorType.jsENOENT,\n                            message: `No such file or directory: '${resolvedFilePathExample}'`,\n                            path: resolvedFilePathExample\n                        })];\n                    }\n                    for (const filePathExample of globResolvedFilePathExample) {\n                        examples.push({\n                            path: path.normalize(filePathExample),\n                            content: JSON.parse(fs.readFileSync(filePathExample, 'utf-8'))\n                        });\n                    }\n                } catch (err) {\n                    return [ApplicationError.create(err)];\n                }\n                return flatMap(examples, example => _validateExample({\n                    createValidator: _initValidatorFactory(openapiSpec, { ignoreFormats }),\n                    schema,\n                    example: example.content,\n                    statistics,\n                    filePathExample: example.path\n                }));\n            }\n        );\n    });\n}\n\n\n/**\n * Merges two `ValidationResponses` together and returns the merged result. The passed `ValidationResponse`s won't be\n * modified.\n * @param {ValidationResponse} response1\n * @param {ValidationResponse} response2\n * @returns {ValidationResponse}\n * @private\n */\nfunction _mergeValidationResponses(response1, response2) {\n    return createValidationResponse({\n        errors: response1.errors.concat(response2.errors),\n        statistics: Object.entries(response1.statistics)\n            .reduce((res, [key, val]) => {\n                if (PROP__SCHEMAS_WITH_EXAMPLES === key) {\n                    [\n                        response1,\n                        response2\n                    ].forEach(response => {\n                        const schemasWithExample = response.statistics[SYM__INTERNAL][PROP__SCHEMAS_WITH_EXAMPLES]\n                            .values();\n                        for (let schema of schemasWithExample) {\n                            res[SYM__INTERNAL][PROP__SCHEMAS_WITH_EXAMPLES].add(schema);\n                        }\n                    });\n                    return res;\n                }\n                res[key] = val + response2.statistics[key];\n                return res;\n            }, _initStatistics())\n    });\n}\n\n/**\n * Extract JSON-pointer(s) for specific path from a OpenAPI-spec\n * @param {String}  path  JSON-path in the OpenAPI-Spec\n * @param {Object}  openapiSpec         OpenAPI-spec\n * @returns {Array.<String>} JSON-pointers to matching elements\n * @private\n */\nfunction _pathToPointer(path, openapiSpec) {\n    return jsonPath({\n        json: openapiSpec,\n        path: path,\n        resultType: ResultType.pointer\n    });\n}\n/**\n * Extract JSON-pointer(s) for specific path from a OpenAPI-spec\n * @param {String}  path  JSON-path in the OpenAPI-Spec\n * @param {Object}  openapiSpec         OpenAPI-spec\n * @returns {String} JSON-pointer to schema or throws error\n * @private\n */\nfunction _getSchmaPointer(pathSchema, openapiSpec) {\n    const schemaPointers = _pathToPointer(pathSchema, openapiSpec);\n    if (schemaPointers.length === 0) {\n        _pathToSchemaNotFoundError(pathSchema);\n    }\n    if (schemaPointers.length > 1) {\n        return [ApplicationError.create({\n            type: ErrorType.jsonPathNotFound,\n            message: `Path to schema cannot identify unique schema: '${pathSchema}'`,\n            path: pathSchema\n        })];\n    }\n    return schemaPointers[0];\n}\n\n/**\n * Validates examples at the given paths in the OpenAPI-spec.\n * @param {Object}          impl            Spec-dependant validator\n * @param {Function}        createValidator Validator factory\n * @param {Array.<String>}  pathsExamples   JSON-paths to examples\n * @param {Object}          openapiSpec     OpenAPI-spec\n * @returns {ValidationResponse}\n * @private\n */\nfunction _validateExamplesPaths({ impl, createValidator },  pathsExamples, openapiSpec) {\n    const statistics = _initStatistics(),\n        validationResult = {\n            valid: true,\n            statistics,\n            errors: []\n        };\n    let validationMap;\n    try {\n        // Create mapping between JSON-schemas and examples\n        validationMap = impl.buildValidationMap(pathsExamples);\n    } catch (error) {\n        // Throw unexpected errors\n        if (!(error instanceof ApplicationError)) {\n            throw error;\n        }\n        // Add known errors and stop\n        validationResult.valid = false;\n        validationResult.errors.push(error);\n        return validationResult;\n    }\n    // Start validation\n    const schemaPointers = Object.keys(validationMap);\n    schemaPointers.forEach(schemaPointer => {\n        _validateSchema({\n            openapiSpec, createValidator, schemaPointer, validationMap, statistics,\n            validationResult\n        });\n    });\n    return validationResult;\n}\n\n/**\n * Validates a single schema.\n * @param {Object}                  openapiSpec         OpenAPI-spec\n * @param {ajv}                     createValidator     Factory, to create JSON-schema validator\n * @param {string}                  schemaPointer          JSON-pointer to schema (for request- or response-property)\n * @param {Object.<String, String>} validationMap Map with schema-pointers as key and example-pointers as value\n * @param {Object}                  statistics          Object to contain statistics metrics\n * @param {Object}                  validationResult    Container, for the validation-results\n * @private\n */\nfunction _validateSchema({\n    openapiSpec, createValidator, schemaPointer, validationMap, statistics,\n    validationResult\n}) {\n    const errors = validationResult.errors;\n    validationMap[schemaPointer].forEach(pathExample => {\n        const example = _getByPointer(pathExample, openapiSpec),\n            // Examples with missing schemas may occur and those are considered valid\n            schema = _extractSchema(schemaPointer, openapiSpec, true);\n        const curErrors = _validateExample({\n            createValidator,\n            schema,\n            example,\n            statistics\n        }).map(error => {\n            error.examplePath = pathExample;\n            return error;\n        });\n        if (!curErrors.length) {\n            return;\n        }\n        validationResult.valid = false;\n        errors.splice(errors.length - 1, 0, ...curErrors);\n    });\n}\n\n/**\n * Creates a container-object for the validation statistics.\n * @returns {ValidationStatistics}\n * @private\n */\nfunction _initStatistics() {\n    const statistics = {\n        [SYM__INTERNAL]: {\n            [PROP__SCHEMAS_WITH_EXAMPLES]: new Set()\n        },\n        examplesTotal: 0,\n        examplesWithoutSchema: 0\n    };\n    Object.defineProperty(statistics, PROP__SCHEMAS_WITH_EXAMPLES, {\n        enumerable: true,\n        get: () => statistics[SYM__INTERNAL][PROP__SCHEMAS_WITH_EXAMPLES].size\n    });\n    return statistics;\n}\n\n/**\n * Extract object by the given JSON-pointer\n * @param {String}      pointer JSON-pointer\n * @param {Object}      json JSON to extract the object(s) from\n * @returns {Object}    Extracted object\n */\nfunction _getByPointer(pointer, json) {\n    try {\n        return jsonPointer.get(json, pointer);\n    } catch (_) {\n        return undefined;\n    }\n}\n\n/**\n * Validates example against the schema. The precondition for this function to work is that the example exists at the\n * given path.\n * `pathExample` and `filePathExample` are exclusively mandatory.\n * itself\n * @param {Function}    createValidator     Factory, to create JSON-schema validator\n * @param {Object}      schema              JSON-schema\n * @param {Object}      example             Example to validate\n * @param {Object}      statistics          Object to contain statistics metrics\n * @param {String}      [filePathExample]   File-path to the example file\n * @returns {Array.<Object>} Array with errors. Empty array, if examples are valid\n * @private\n */\nfunction _validateExample({ createValidator, schema, example, statistics, filePathExample }) {\n    const\n        errors = [];\n    statistics.examplesTotal++;\n    // No schema, no validation (Examples without schema are considered valid)\n    if (!schema) {\n        statistics.examplesWithoutSchema++;\n        return errors;\n    }\n    statistics[SYM__INTERNAL][PROP__SCHEMAS_WITH_EXAMPLES].add(schema);\n    const validate = compileValidate(createValidator(), schema);\n    if (validate(example)) {\n        return errors;\n    }\n    return errors.concat(...validate.errors.map(ApplicationError.create))\n        .map(error => {\n            if (!filePathExample) {\n                return error;\n            }\n            error.exampleFilePath = filePathExample;\n            return error;\n        });\n}\n\n/**\n * Create a new instance of a JSON schema validator\n * @returns {ajv}\n * @private\n */\nfunction _initValidatorFactory(specSchema, { ignoreFormats }) {\n    return getValidatorFactory(specSchema, {\n        schemaId: 'auto',\n        discriminator: true,\n        strict: false,\n        allErrors: true,\n        formats: ignoreFormats && ignoreFormats.reduce((result, entry) => {\n            result[entry] = () => true;\n            return result;\n        }, {})\n    });\n}\n\n/**\n * Extracts the schema in the OpenAPI-spec at the given JSON-pointer.\n * @param   {string}    schemaPointer                          JSON-pointer to the schema\n * @param   {Object}    openapiSpec                         OpenAPI-spec\n * @param   {boolean}   [suppressErrorIfNotFound=false]     Don't throw `ErrorJsonPathNotFound` if the response does not\n *                                                          exist at the given JSON-pointer\n * @returns {Object|Array.<Object>|undefined} Matching schema(s)\n * @throws  {ErrorJsonPathNotFound} Thrown, when there is no schema at the given path and\n *                                  `suppressErrorIfNotFound` is false\n * @private\n */\nfunction _extractSchema(schemaPointer, openapiSpec, suppressErrorIfNotFound = false) {\n    const schema = _getByPointer(schemaPointer, openapiSpec);\n    if (!suppressErrorIfNotFound && !schema) {\n        _pathToSchemaNotFoundError(schemaPointer);\n    }\n    return schema;\n}\n\nfunction _pathToSchemaNotFoundError(schemaPointer) {\n    throw new ErrorJsonPathNotFound(`Path to schema can't be found: '${schemaPointer}'`, {\n        params: {\n            path: schemaPointer\n        }\n    });\n}\n","const path = require('path'),\n    refParser = require('json-schema-ref-parser');\n\nmodule.exports = {\n    createValidationResponse,\n    dereferenceJsonSchema\n};\n\n/**\n * Creates a unified response for the validation-result\n * @param {Array.<ApplicationError>}    errors\n * @param {ValidationStatistics}        statistics\n * @returns {ValidationResponse}\n * @private\n */\nfunction createValidationResponse({ errors, statistics = {} }) {\n    return {\n        valid: !errors.length,\n        statistics,\n        errors\n    };\n}\n\n/**\n * Includes all referenced, external schemas (by the keyword `$ref`) into the schema\n *\n * CAUTION: This function is not concurrency-safe !!\n * This function changes the working dir and sets it back. This may become an concurrency issue when there are\n * other tasks running that rely on the working dir while this function waits for the asynchronous task of\n * dereferencing to complete.\n *\n * @param {String} pathToSchema     File-path to the schema\n * @param {Object} jsonSchema       Schema with potential externally referenced schemas\n * @returns {Promise<Object>}       Dereferenced schema\n */\nasync function dereferenceJsonSchema(pathToSchema, jsonSchema) {\n    const currentWorkingDir = process.cwd();\n    // Change the working dir to the schema-path, to make sure that relative paths can be resolved\n    process.chdir(path.dirname(pathToSchema));\n    const dereferencedSchema = await refParser.dereference(jsonSchema);\n    // Restore original working dir\n    process.chdir(currentWorkingDir);\n    return dereferencedSchema;\n}\n","/**\n * Wrapper for the JSONSchema-validator\n */\n\nconst { JSONPath: jsonPath } = require('jsonpath-plus'),\n    JsonPointer = require('json-pointer'),\n    Ajv = require('ajv-draft-04'),\n    addFormats = require('ajv-formats');\n\nconst PROP__ID = '$id',\n    JSON_PATH__REFS = '$..\\$ref',\n    ID__SPEC_SCHEMA = 'https://www.npmjs.com/package/openapi-examples-validator/defs.json',\n    ID__RESPONSE_SCHEMA = 'https://www.npmjs.com/package/openapi-examples-validator/schema.json';\n\nmodule.exports = {\n    getValidatorFactory,\n    compileValidate\n};\n\n/**\n * Get a factory-function to create a prepared validator-instance\n * @param {Object}  specSchema  OpenAPI-spec of which potential local references will be extracted\n * @param {Object}  [options]   Options for the validator\n * @returns {function(): (ajv | ajv.Ajv)}\n */\nfunction getValidatorFactory(specSchema, options, { provider = (opt) =>  new Ajv(opt) }) {\n    const preparedSpecSchema = _createReferenceSchema(specSchema);\n    return () => {\n        const validator = provider(options);\n        addFormats(validator);\n\n        validator.addSchema(preparedSpecSchema);\n\n        return validator;\n    };\n}\n\n/**\n * Compiles the validator-function.\n * @param {ajv | ajv.Ajv}   validator       Validator-instance\n * @param {Object}          responseSchema  The response-schema, against the examples will be validated\n * @returns {ajv.ValidateFunction}\n */\nfunction compileValidate(validator, responseSchema) {\n    const preparedResponseSchema = _prepareResponseSchema(responseSchema, ID__RESPONSE_SCHEMA);\n    _replaceRefsToPreparedSpecSchema(preparedResponseSchema);\n\n    let result;\n    try {\n        result = validator.compile(preparedResponseSchema);\n    } catch (e) {\n        result = () => {};\n        result.errors = [e];\n    }\n    return result;\n}\n\n/**\n * Prepares the schema, to be used with internal-references\n * @param {Object}  specSchema  The schema to be prebared\n * @param {String}  idSchema    The unique ID for the schema\n * @returns {Object}\n * @private\n */\nfunction _prepareResponseSchema(specSchema, idSchema) {\n    const preparedSchema = Object.assign({}, specSchema);\n    preparedSchema[PROP__ID] = idSchema;\n    return preparedSchema;\n}\n\n/**\n * Replaces all internal references to the schema, with the extracted references, based on the origin OpenAPI-spec\n * @param {Object}  schema  The schema, containing references have to be replaced\n * @private\n */\nfunction _replaceRefsToPreparedSpecSchema(schema) {\n    jsonPath({\n        path: JSON_PATH__REFS,\n        json: schema,\n        callback(value, type, payload) {\n            if (!value.startsWith('#')) { return; }\n            payload.parent[payload.parentProperty] = `${ ID__SPEC_SCHEMA }${ value }`;\n        }\n    });\n}\n\n/**\n * Extracts all references and returns a new schema, containing only those.\n * @param {Object} specSchema   Schema, which references shall be extracted\n * @returns {Object}\n * @private\n */\nfunction _createReferenceSchema(specSchema) {\n    const refSchema = {\n        [PROP__ID]: ID__SPEC_SCHEMA\n    };\n    jsonPath({\n        path: JSON_PATH__REFS,\n        json: specSchema,\n        callback(value) {\n            if (!value.startsWith('#')) { return; }\n            const pointer = value.substring(1),\n                definition = JsonPointer.get(specSchema, pointer);\n            JsonPointer.set(refSchema, pointer, definition);\n        }\n    });\n    return refSchema;\n}\n","module.exports = require(\"ajv-draft-04\");","module.exports = require(\"ajv-formats\");","module.exports = require(\"errno\");","module.exports = require(\"glob\");","module.exports = require(\"json-pointer\");","module.exports = require(\"json-schema-ref-parser\");","module.exports = require(\"jsonpath-plus\");","module.exports = require(\"lodash.clonedeep\");","module.exports = require(\"lodash.flatmap\");","module.exports = require(\"lodash.flatten\");","module.exports = require(\"lodash.merge\");","module.exports = require(\"yaml\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(579);\n"],"names":["merge","require","ENOENT","ErrorType","jsENOENT","code","jsonPathNotFound","errorAndErrorsMutuallyExclusive","parseError","validation","ApplicationError","static","err","message","path","cause","type","options","params","constructor","Object","assign","this","module","exports","parent","parentProperty","pointer","value","implV2","implV3","REGEX__OPEN_API","getImplementation","openapiSpec","swagger","openapi","match","applyCallbackToAllObjectModels","setAllPropertiesRequired","openApiSpec","examplePaths","hasOwnProperty","required","keys","properties","JSONPath","jsonPath","ResultType","_find","json","resultType","callback","flatten","matchCallbackBuilder","paths","Set","forEach","consecutiveMatch","length","_isPropertiesDefinition","add","examplePath","exampleMatch","jsPath","startsWith","delete","_excludeExamples","result","data","entity","setNoAdditionalProperties","hasJsonCombinerParentRegex","RegExp","JSON_SCHEMA_COMBINERS","join","schema","test","console","warn","some","combiner","additionalProperties","cloneDeep","getJsonPathsToExamples","buildValidationMap","pathsExamples","reduce","validationMap","pathExample","pathSchema","examplePointer","pathSegs","split","idxExamples","lastIndexOf","splice","_getSchemaPointerOfExample","prepare","noAdditionalProperties","allPropertiesRequired","openapiSpecCopy","RESPONSES","REQUEST","SINGLE_EXAMPLE","MANY_EXAMPLES","PATH__EXAMPLE","PATH__EXAMPLES","PATH__EXAMPLE__REQUEST_BODY","PATH__EXAMPLES__REQUEST_BODY","ExampleType","exampleTypesOfSchemas","Map","pathSchemaAsArray","exampleType","idxExample","exampleTypeOfSchema","get","pathContextAsArray","slice","create","pathContext","_throwMutuallyExclusiveError","set","flatMap","jsonPointer","fs","glob","yaml","refParser","createError","getValidatorFactory","compileValidate","Determiner","createValidationResponse","dereferenceJsonSchema","SYM__INTERNAL","Symbol","PROP__SCHEMAS_WITH_EXAMPLES","FILE_EXTENSIONS__YAML","ErrorJsonPathNotFound","async","validateExamples","ignoreFormats","specPostprocessor","spec","validatorFactory","_initValidatorFactory","impl","dereference","res","pathToExamples","concat","_pathToPointer","map","escapeExampleName","createValidator","statistics","_initStatistics","validationResult","valid","errors","error","push","schemaPointer","example","_getByPointer","_extractSchema","curErrors","_validateExample","_validateSchema","_validateExamplesPaths","_parseSpec","filePath","isYaml","extension","pop","includes","_isFileTypeYaml","jsonSchema","parse","readFileSync","e","name","JSON","_validate","validationHandler","_handleExamplesByMapValidation","mapExternalExamples","cwdToMappingFile","dirPathMapExternalExamples","entries","filePathsExample","_getSchmaPointer","filePathExample","examples","resolvedFilePathExample","globResolvedFilePathExample","sync","normalize","content","schemaPointers","_pathToSchemaNotFoundError","examplesTotal","examplesWithoutSchema","defineProperty","enumerable","size","_","validate","exampleFilePath","specSchema","schemaId","discriminator","strict","allErrors","formats","entry","suppressErrorIfNotFound","validateFile","validateExample","filePathSchema","validateExamplesByMap","globMapExternalExamples","matchingFilePathsMapping","filePathsMaps","nonull","responses","filePathMapExternalExamples","dirname","mapFilePath","response","response2","response1","key","val","schemasWithExample","values","pathToSchema","currentWorkingDir","process","cwd","chdir","dereferencedSchema","JsonPointer","Ajv","addFormats","JSON_PATH__REFS","ID__SPEC_SCHEMA","provider","opt","preparedSpecSchema","refSchema","substring","definition","_createReferenceSchema","validator","addSchema","responseSchema","preparedResponseSchema","idSchema","preparedSchema","_prepareResponseSchema","payload","compile","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}