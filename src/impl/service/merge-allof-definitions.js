const { applyCallbackToAllObjectModels } = require('./common');

module.exports = {
    doMergeAllofDefinitions,
    fixSchemaPathWithAllof
};

const allOfSchemaCombiner = 'allOf';
let originalOpenApiSpec = null;
let hasReplacedAllofDefinitions = false;


/**
 * Merge all the allOf definitions into the parent schema
 * @param {Object}                  openApiSpecCopy     The to-be-modified schema
 * @param {Object}                  openApiSpec         The original readonly schema
 */
function doMergeAllofDefinitions(openApiSpecCopy, openApiSpec) {
    originalOpenApiSpec = openApiSpec;
    applyCallbackToAllObjectModels(openApiSpecCopy, [],
        () => {
            return (schema) => {
                if (schema.hasOwnProperty(allOfSchemaCombiner)
                    && Array.isArray(schema[allOfSchemaCombiner])
                    && schema[allOfSchemaCombiner].every((allOfSchema) =>
                        typeof allOfSchema === 'object' && allOfSchema.type === 'object'
                    )) {
                    hasReplacedAllofDefinitions = true;
                    schema.type = 'object';
                    schema.properties = Object.assign({}, ...schema[allOfSchemaCombiner]
                        .map(allOfSchema => allOfSchema.properties));
                    schema.required = schema[allOfSchemaCombiner].map(allOfSchema => allOfSchema.required || []).flat();
                    if (schema[allOfSchemaCombiner].some((allOfSchema) => allOfSchema.hasOwnProperty('minProperties'))) {
                        schema.minProperties = schema[allOfSchemaCombiner]
                            .map(allOfSchema => allOfSchema.minProperties || 0)
                            .reduce((a, b) => a + b);
                    }
                    if (schema[allOfSchemaCombiner].some((allOfSchema) => allOfSchema.hasOwnProperty('maxProperties'))) {
                        schema.maxProperties = schema[allOfSchemaCombiner]
                            .map(allOfSchema => allOfSchema.maxProperties
                                || (allOfSchema.properties ? Object.keys(allOfSchema.properties).length : 0))
                            .reduce((a, b) => a + b);
                    }
                    delete schema[allOfSchemaCombiner];
                }
            };
        });
}

/**
 * Fix the errors path in order to follow the original schema with allOf definitions
 * @param {Array.<ApplicationError>}    errors generated by the validation
 */
function fixSchemaPathWithAllof(errors) {
    if (originalOpenApiSpec !== null && hasReplacedAllofDefinitions) {
        for (const i in errors) {
            console.log('Fixing schema paths with allOf', errors[i]);
        }
    }
}
// node ./src/cli.js test/data/v3/merge-allof-definitions/schema-with-additional-property.yaml -n -a
